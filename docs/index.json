{
  "api/NStack/NStack.html": {
    "href": "api/NStack/NStack.html",
    "title": "Namespace NStack",
    "keywords": "Namespace NStack Classes Unicode Unicode class contains helper methods to support Unicode encoding. Unicode.Category Static class containing the various Unicode category range tables Unicode.Property Static class containing the proeprty-based tables. Unicode.Script Static class containing the Unicode script tables. ustring ustrings are used to manipulate utf8 strings, either from byte arrays or blocks of memory. Utf8 UTF8 Helper methods and routines. Structs Unicode.RangeTable Range tables describe classes of unicode code points. Unicode.SpecialCase SpecialCase represents language-specific case mappings such as Turkish. Enums Unicode.Case The types of cases supported. Delegates ustring.RunePredicate Rune predicate functions take a rune as input and return a boolean determining if the rune matches or not."
  },
  "api/NStack/NStack.Unicode.Case.html": {
    "href": "api/NStack/NStack.Unicode.Case.html",
    "title": "Enum Unicode.Case",
    "keywords": "Enum Unicode.Case The types of cases supported. Namespace : NStack Assembly : NStack.dll Syntax public enum Case Fields Name Description Lower Lower case Title Titlecase capitalizes the first letter, and keeps the rest in lowercase. Sometimes it is not as straight forward as the uppercase, some characters require special handling, like certain ligatures and greek characters. Upper Upper case"
  },
  "api/NStack/NStack.Unicode.Category.html": {
    "href": "api/NStack/NStack.Unicode.Category.html",
    "title": "Class Unicode.Category",
    "keywords": "Class Unicode.Category Static class containing the various Unicode category range tables Inheritance System.Object Unicode.Category Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : NStack Assembly : NStack.dll Syntax public static class Category Remarks There are static properties that can be used to fetch a specific category, or you can use the NStack.Unicode.Category.Get method this class to retrieve the RangeTable by its Unicode category table name Properties C Other/C is the set of Unicode control and special characters, category C. Declaration public static Unicode.RangeTable C { get; } Property Value Type Description Unicode.RangeTable Cc Cc is the set of Unicode characters in category Cc. Declaration public static Unicode.RangeTable Cc { get; } Property Value Type Description Unicode.RangeTable Cf Cf is the set of Unicode characters in category Cf. Declaration public static Unicode.RangeTable Cf { get; } Property Value Type Description Unicode.RangeTable Co Co is the set of Unicode characters in category Co. Declaration public static Unicode.RangeTable Co { get; } Property Value Type Description Unicode.RangeTable Cs Cs is the set of Unicode characters in category Cs. Declaration public static Unicode.RangeTable Cs { get; } Property Value Type Description Unicode.RangeTable Digit Digit is the set of Unicode characters with the \"decimal digit\" property. Declaration public static Unicode.RangeTable Digit { get; } Property Value Type Description Unicode.RangeTable L Letter/L is the set of Unicode letters, category L. Declaration public static Unicode.RangeTable L { get; } Property Value Type Description Unicode.RangeTable Letter Letter/L is the set of Unicode letters, category L. Declaration public static Unicode.RangeTable Letter { get; } Property Value Type Description Unicode.RangeTable Ll Ll is the set of Unicode characters in category Ll. Declaration public static Unicode.RangeTable Ll { get; } Property Value Type Description Unicode.RangeTable Lm Lm is the set of Unicode characters in category Lm. Declaration public static Unicode.RangeTable Lm { get; } Property Value Type Description Unicode.RangeTable Lo Lo is the set of Unicode characters in category Lo. Declaration public static Unicode.RangeTable Lo { get; } Property Value Type Description Unicode.RangeTable Lower Lower is the set of Unicode lower case letters. Declaration public static Unicode.RangeTable Lower { get; } Property Value Type Description Unicode.RangeTable Lt Lt is the set of Unicode characters in category Lt. Declaration public static Unicode.RangeTable Lt { get; } Property Value Type Description Unicode.RangeTable Lu Lu is the set of Unicode characters in category Lu. Declaration public static Unicode.RangeTable Lu { get; } Property Value Type Description Unicode.RangeTable M Mark/M is the set of Unicode mark characters, category M. Declaration public static Unicode.RangeTable M { get; } Property Value Type Description Unicode.RangeTable Mark Mark/M is the set of Unicode mark characters, category M. Declaration public static Unicode.RangeTable Mark { get; } Property Value Type Description Unicode.RangeTable Mc Mc is the set of Unicode characters in category Mc. Declaration public static Unicode.RangeTable Mc { get; } Property Value Type Description Unicode.RangeTable Me Me is the set of Unicode characters in category Me. Declaration public static Unicode.RangeTable Me { get; } Property Value Type Description Unicode.RangeTable Mn Mn is the set of Unicode characters in category Mn. Declaration public static Unicode.RangeTable Mn { get; } Property Value Type Description Unicode.RangeTable N Number/N is the set of Unicode number characters, category N. Declaration public static Unicode.RangeTable N { get; } Property Value Type Description Unicode.RangeTable Nd Nd is the set of Unicode characters in category Nd. Declaration public static Unicode.RangeTable Nd { get; } Property Value Type Description Unicode.RangeTable Nl Nl is the set of Unicode characters in category Nl. Declaration public static Unicode.RangeTable Nl { get; } Property Value Type Description Unicode.RangeTable No No is the set of Unicode characters in category No. Declaration public static Unicode.RangeTable No { get; } Property Value Type Description Unicode.RangeTable Number Number/N is the set of Unicode number characters, category N. Declaration public static Unicode.RangeTable Number { get; } Property Value Type Description Unicode.RangeTable Other Other/C is the set of Unicode control and special characters, category C. Declaration public static Unicode.RangeTable Other { get; } Property Value Type Description Unicode.RangeTable P Punct/P is the set of Unicode punctuation characters, category P. Declaration public static Unicode.RangeTable P { get; } Property Value Type Description Unicode.RangeTable Pc Pc is the set of Unicode characters in category Pc. Declaration public static Unicode.RangeTable Pc { get; } Property Value Type Description Unicode.RangeTable Pd Pd is the set of Unicode characters in category Pd. Declaration public static Unicode.RangeTable Pd { get; } Property Value Type Description Unicode.RangeTable Pe Pe is the set of Unicode characters in category Pe. Declaration public static Unicode.RangeTable Pe { get; } Property Value Type Description Unicode.RangeTable Pf Pf is the set of Unicode characters in category Pf. Declaration public static Unicode.RangeTable Pf { get; } Property Value Type Description Unicode.RangeTable Pi Pi is the set of Unicode characters in category Pi. Declaration public static Unicode.RangeTable Pi { get; } Property Value Type Description Unicode.RangeTable Po Po is the set of Unicode characters in category Po. Declaration public static Unicode.RangeTable Po { get; } Property Value Type Description Unicode.RangeTable Ps Ps is the set of Unicode characters in category Ps. Declaration public static Unicode.RangeTable Ps { get; } Property Value Type Description Unicode.RangeTable Punct Punct/P is the set of Unicode punctuation characters, category P. Declaration public static Unicode.RangeTable Punct { get; } Property Value Type Description Unicode.RangeTable S Symbol/S is the set of Unicode symbol characters, category S. Declaration public static Unicode.RangeTable S { get; } Property Value Type Description Unicode.RangeTable Sc Sc is the set of Unicode characters in category Sc. Declaration public static Unicode.RangeTable Sc { get; } Property Value Type Description Unicode.RangeTable Sk Sk is the set of Unicode characters in category Sk. Declaration public static Unicode.RangeTable Sk { get; } Property Value Type Description Unicode.RangeTable Sm Sm is the set of Unicode characters in category Sm. Declaration public static Unicode.RangeTable Sm { get; } Property Value Type Description Unicode.RangeTable So So is the set of Unicode characters in category So. Declaration public static Unicode.RangeTable So { get; } Property Value Type Description Unicode.RangeTable Space Space/Z is the set of Unicode space characters, category Z. Declaration public static Unicode.RangeTable Space { get; } Property Value Type Description Unicode.RangeTable Symbol Symbol/S is the set of Unicode symbol characters, category S. Declaration public static Unicode.RangeTable Symbol { get; } Property Value Type Description Unicode.RangeTable Title Title is the set of Unicode title case letters. Declaration public static Unicode.RangeTable Title { get; } Property Value Type Description Unicode.RangeTable Upper Upper is the set of Unicode upper case letters. Declaration public static Unicode.RangeTable Upper { get; } Property Value Type Description Unicode.RangeTable Z Space/Z is the set of Unicode space characters, category Z. Declaration public static Unicode.RangeTable Z { get; } Property Value Type Description Unicode.RangeTable Zl Zl is the set of Unicode characters in category Zl. Declaration public static Unicode.RangeTable Zl { get; } Property Value Type Description Unicode.RangeTable Zp Zp is the set of Unicode characters in category Zp. Declaration public static Unicode.RangeTable Zp { get; } Property Value Type Description Unicode.RangeTable Zs Zs is the set of Unicode characters in category Zs. Declaration public static Unicode.RangeTable Zs { get; } Property Value Type Description Unicode.RangeTable Methods Get(String) Retrieves the specified RangeTable from the Unicode category name Declaration public static Unicode.RangeTable Get(string categoryName) Parameters Type Name Description System.String categoryName The unicode character category name Returns Type Description Unicode.RangeTable"
  },
  "api/NStack/NStack.Unicode.html": {
    "href": "api/NStack/NStack.Unicode.html",
    "title": "Class Unicode",
    "keywords": "Class Unicode Unicode class contains helper methods to support Unicode encoding. Inheritance System.Object Unicode Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : NStack Assembly : NStack.dll Syntax public class Unicode Remarks Generally the Unicode class provided methods that can help you classify and convert Unicode code points. The word codepoint is considered a mouthful so in this class, the word \"rune\" is used instead and is represented by the uint value type. Unicode code points can be produced by combining independent characters, so the rune for a character can be produced by combining one character and other elements of it. Runes on the other hand correspond to a specific character. This class surfaces various methods to classify case of a Rune, like NStack.Unicode.IsUpper , NStack.Unicode.IsLower , NStack.Unicode.IsDigit , NStack.Unicode.IsGraphic to convert runes from one case to another using the NStack.Unicode.ToUpper , NStack.Unicode.ToLower , NStack.Unicode.ToTitle as well as various constants that are useful when working with Unicode runes. Unicode defines various character classes which are surfaced as RangeTables as static properties in this class. You can probe whether a rune belongs to a specific range table Fields GraphicRanges The range tables for graphics Declaration public static Unicode.RangeTable[] GraphicRanges Field Value Type Description Unicode.RangeTable [] MaxAscii The maximum ASCII value. Declaration public const uint MaxAscii = 127U Field Value Type Description System.UInt32 MaxLatin1 The maximum latin1 value. Declaration public const uint MaxLatin1 = 255U Field Value Type Description System.UInt32 MaxRune Maximum valid Unicode code point. Declaration public const int MaxRune = 1114111 Field Value Type Description System.Int32 PrintRanges The range tables for print Declaration public static Unicode.RangeTable[] PrintRanges Field Value Type Description Unicode.RangeTable [] ReplacementChar Represents invalid code points. Declaration public const uint ReplacementChar = 65533U Field Value Type Description System.UInt32 TurkishCase Special casing rules for Turkish. Declaration public static Unicode.SpecialCase TurkishCase Field Value Type Description Unicode.SpecialCase Version Version is the Unicode edition from which the tables are derived. Declaration public const string Version = \"14.0.0\" Field Value Type Description System.String Methods IsControl(UInt32) IsControl reports whether the rune is a control character. Declaration public static bool IsControl(uint rune) Parameters Type Name Description System.UInt32 rune The rune to test for. Returns Type Description System.Boolean true , if the rune is a lower case letter, false otherwise. Remarks The C (Other) Unicode category includes more code points such as surrogates; use C.InRange (r) to test for them. IsDigit(UInt32) IsDigit reports whether the rune is a decimal digit. Declaration public static bool IsDigit(uint rune) Parameters Type Name Description System.UInt32 rune The rune to test for. Returns Type Description System.Boolean true , if the rune is a mark, false otherwise. IsGraphic(UInt32) IsGraphic reports whether the rune is defined as a Graphic by Unicode. Declaration public static bool IsGraphic(uint rune) Parameters Type Name Description System.UInt32 rune The rune to test for. Returns Type Description System.Boolean true , if the rune is a lower case letter, false otherwise. Remarks Such characters include letters, marks, numbers, punctuation, symbols, and spaces, from categories L, M, N, P, S, Zs. IsLetter(UInt32) IsLetter reports whether the rune is a letter (category L). Declaration public static bool IsLetter(uint rune) Parameters Type Name Description System.UInt32 rune The rune to test for. Returns Type Description System.Boolean true , if the rune is a letter, false otherwise. Remarks IsLower(UInt32) Reports whether the rune is a lower case letter. Declaration public static bool IsLower(uint rune) Parameters Type Name Description System.UInt32 rune The rune to test for. Returns Type Description System.Boolean true , if the rune is a lower case lette, false otherwise. IsMark(UInt32) IsMark reports whether the rune is a letter (category M). Declaration public static bool IsMark(uint rune) Parameters Type Name Description System.UInt32 rune The rune to test for. Returns Type Description System.Boolean true , if the rune is a mark, false otherwise. Remarks Reports whether the rune is a mark character (category M). IsNumber(UInt32) IsNumber reports whether the rune is a letter (category N). Declaration public static bool IsNumber(uint rune) Parameters Type Name Description System.UInt32 rune The rune to test for. Returns Type Description System.Boolean true , if the rune is a mark, false otherwise. Remarks Reports whether the rune is a mark character (category N). IsPrint(UInt32) IsPrint reports whether the rune is defined as printable. Declaration public static bool IsPrint(uint rune) Parameters Type Name Description System.UInt32 rune The rune to test for. Returns Type Description System.Boolean true , if the rune is a lower case letter, false otherwise. Remarks Such characters include letters, marks, numbers, punctuation, symbols, and the ASCII space character, from categories L, M, N, P, S and the ASCII space character. This categorization is the same as IsGraphic except that the only spacing character is ASCII space, U+0020. IsPunct(UInt32) IsPunct reports whether the rune is a letter (category P). Declaration public static bool IsPunct(uint rune) Parameters Type Name Description System.UInt32 rune The rune to test for. Returns Type Description System.Boolean true , if the rune is a mark, false otherwise. Remarks Reports whether the rune is a mark character (category P). IsRuneInRanges(UInt32, Unicode.RangeTable[]) Determines if a rune is on a set of ranges. Declaration public static bool IsRuneInRanges(uint rune, params Unicode.RangeTable[] inRanges) Parameters Type Name Description System.UInt32 rune Rune. Unicode.RangeTable [] inRanges In ranges. Returns Type Description System.Boolean true , if rune in ranges was used, false otherwise. IsSpace(UInt32) IsSpace reports whether the rune is a space character as defined by Unicode's White Space property. Declaration public static bool IsSpace(uint rune) Parameters Type Name Description System.UInt32 rune The rune to test for. Returns Type Description System.Boolean true , if the rune is a mark, false otherwise. Remarks In the Latin-1 space, white space includes '\\t', '\\n', '\\v', '\\f', '\\r', ' ', U+0085 (NEL), U+00A0 (NBSP). Other definitions of spacing characters are set by category Z and property Pattern_White_Space. IsSymbol(UInt32) IsSymbol reports whether the rune is a symbolic character. Declaration public static bool IsSymbol(uint rune) Parameters Type Name Description System.UInt32 rune The rune to test for. Returns Type Description System.Boolean true , if the rune is a mark, false otherwise. IsTitle(UInt32) Reports whether the rune is a title case letter. Declaration public static bool IsTitle(uint rune) Parameters Type Name Description System.UInt32 rune The rune to test for. Returns Type Description System.Boolean true , if the rune is a lower case lette, false otherwise. IsUpper(UInt32) Reports whether the rune is an upper case letter. Declaration public static bool IsUpper(uint rune) Parameters Type Name Description System.UInt32 rune The rune to test for. Returns Type Description System.Boolean true , if the rune is an upper case lette, false otherwise. SimpleFold(UInt32) SimpleFold iterates over Unicode code points equivalent under the Unicode-defined simple case folding. Declaration public static uint SimpleFold(uint rune) Parameters Type Name Description System.UInt32 rune Rune. Returns Type Description System.UInt32 The simple-case folded rune. Remarks SimpleFold iterates over Unicode code points equivalent under the Unicode-defined simple case folding. Among the code points equivalent to rune (including rune itself), SimpleFold returns the smallest rune > r if one exists, or else the smallest rune >= 0. If r is not a valid Unicode code point, SimpleFold(r) returns r. For example: SimpleFold('A') = 'a' SimpleFold('a') = 'A' SimpleFold('K') = 'k' SimpleFold('k') = '\\u212A' (Kelvin symbol, K) SimpleFold('\\u212A') = 'K' SimpleFold('1') = '1' SimpleFold(-2) = -2 To(Unicode.Case, UInt32) To maps the rune to the specified case: Case.Upper, Case.Lower, or Case.Title Declaration public static uint To(Unicode.Case toCase, uint rune) Parameters Type Name Description Unicode.Case toCase The destination case. System.UInt32 rune Rune to convert. Returns Type Description System.UInt32 The cased character. ToLower(UInt32) ToLower maps the rune to lower case. Declaration public static uint ToLower(uint rune) Parameters Type Name Description System.UInt32 rune Rune. Returns Type Description System.UInt32 The lower cased rune if it can be. ToTitle(UInt32) ToLower maps the rune to title case. Declaration public static uint ToTitle(uint rune) Parameters Type Name Description System.UInt32 rune Rune. Returns Type Description System.UInt32 The lower cased rune if it can be. ToUpper(UInt32) ToUpper maps the rune to upper case. Declaration public static uint ToUpper(uint rune) Parameters Type Name Description System.UInt32 rune Rune. Returns Type Description System.UInt32 The upper cased rune if it can be."
  },
  "api/NStack/NStack.Unicode.Property.html": {
    "href": "api/NStack/NStack.Unicode.Property.html",
    "title": "Class Unicode.Property",
    "keywords": "Class Unicode.Property Static class containing the proeprty-based tables. Inheritance System.Object Unicode.Property Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : NStack Assembly : NStack.dll Syntax public static class Property Remarks There are static properties that can be used to fetch RangeTables that identify characters that have a specific property, or you can use the NStack.Unicode.Property.Get method in this class to retrieve the range table by the property name Properties ASCII_Hex_Digit ASCII_Hex_Digit is the set of Unicode characters with property ASCII_Hex_Digit. Declaration public static Unicode.RangeTable ASCII_Hex_Digit { get; } Property Value Type Description Unicode.RangeTable Bidi_Control Bidi_Control is the set of Unicode characters with property Bidi_Control. Declaration public static Unicode.RangeTable Bidi_Control { get; } Property Value Type Description Unicode.RangeTable Dash Dash is the set of Unicode characters with property Dash. Declaration public static Unicode.RangeTable Dash { get; } Property Value Type Description Unicode.RangeTable Deprecated Deprecated is the set of Unicode characters with property Deprecated. Declaration public static Unicode.RangeTable Deprecated { get; } Property Value Type Description Unicode.RangeTable Diacritic Diacritic is the set of Unicode characters with property Diacritic. Declaration public static Unicode.RangeTable Diacritic { get; } Property Value Type Description Unicode.RangeTable Extender Extender is the set of Unicode characters with property Extender. Declaration public static Unicode.RangeTable Extender { get; } Property Value Type Description Unicode.RangeTable Hex_Digit Hex_Digit is the set of Unicode characters with property Hex_Digit. Declaration public static Unicode.RangeTable Hex_Digit { get; } Property Value Type Description Unicode.RangeTable Hyphen Hyphen is the set of Unicode characters with property Hyphen. Declaration public static Unicode.RangeTable Hyphen { get; } Property Value Type Description Unicode.RangeTable Ideographic Ideographic is the set of Unicode characters with property Ideographic. Declaration public static Unicode.RangeTable Ideographic { get; } Property Value Type Description Unicode.RangeTable IDS_Binary_Operator IDS_Binary_Operator is the set of Unicode characters with property IDS_Binary_Operator. Declaration public static Unicode.RangeTable IDS_Binary_Operator { get; } Property Value Type Description Unicode.RangeTable IDS_Trinary_Operator IDS_Trinary_Operator is the set of Unicode characters with property IDS_Trinary_Operator. Declaration public static Unicode.RangeTable IDS_Trinary_Operator { get; } Property Value Type Description Unicode.RangeTable Join_Control Join_Control is the set of Unicode characters with property Join_Control. Declaration public static Unicode.RangeTable Join_Control { get; } Property Value Type Description Unicode.RangeTable Logical_Order_Exception Logical_Order_Exception is the set of Unicode characters with property Logical_Order_Exception. Declaration public static Unicode.RangeTable Logical_Order_Exception { get; } Property Value Type Description Unicode.RangeTable Noncharacter_Code_Point Noncharacter_Code_Point is the set of Unicode characters with property Noncharacter_Code_Point. Declaration public static Unicode.RangeTable Noncharacter_Code_Point { get; } Property Value Type Description Unicode.RangeTable Other_Alphabetic Other_Alphabetic is the set of Unicode characters with property Other_Alphabetic. Declaration public static Unicode.RangeTable Other_Alphabetic { get; } Property Value Type Description Unicode.RangeTable Other_Default_Ignorable_Code_Point Other_Default_Ignorable_Code_Point is the set of Unicode characters with property Other_Default_Ignorable_Code_Point. Declaration public static Unicode.RangeTable Other_Default_Ignorable_Code_Point { get; } Property Value Type Description Unicode.RangeTable Other_Grapheme_Extend Other_Grapheme_Extend is the set of Unicode characters with property Other_Grapheme_Extend. Declaration public static Unicode.RangeTable Other_Grapheme_Extend { get; } Property Value Type Description Unicode.RangeTable Other_ID_Continue Other_ID_Continue is the set of Unicode characters with property Other_ID_Continue. Declaration public static Unicode.RangeTable Other_ID_Continue { get; } Property Value Type Description Unicode.RangeTable Other_ID_Start Other_ID_Start is the set of Unicode characters with property Other_ID_Start. Declaration public static Unicode.RangeTable Other_ID_Start { get; } Property Value Type Description Unicode.RangeTable Other_Lowercase Other_Lowercase is the set of Unicode characters with property Other_Lowercase. Declaration public static Unicode.RangeTable Other_Lowercase { get; } Property Value Type Description Unicode.RangeTable Other_Math Other_Math is the set of Unicode characters with property Other_Math. Declaration public static Unicode.RangeTable Other_Math { get; } Property Value Type Description Unicode.RangeTable Other_Uppercase Other_Uppercase is the set of Unicode characters with property Other_Uppercase. Declaration public static Unicode.RangeTable Other_Uppercase { get; } Property Value Type Description Unicode.RangeTable Pattern_Syntax Pattern_Syntax is the set of Unicode characters with property Pattern_Syntax. Declaration public static Unicode.RangeTable Pattern_Syntax { get; } Property Value Type Description Unicode.RangeTable Pattern_White_Space Pattern_White_Space is the set of Unicode characters with property Pattern_White_Space. Declaration public static Unicode.RangeTable Pattern_White_Space { get; } Property Value Type Description Unicode.RangeTable Prepended_Concatenation_Mark Prepended_Concatenation_Mark is the set of Unicode characters with property Prepended_Concatenation_Mark. Declaration public static Unicode.RangeTable Prepended_Concatenation_Mark { get; } Property Value Type Description Unicode.RangeTable Quotation_Mark Quotation_Mark is the set of Unicode characters with property Quotation_Mark. Declaration public static Unicode.RangeTable Quotation_Mark { get; } Property Value Type Description Unicode.RangeTable Radical Radical is the set of Unicode characters with property Radical. Declaration public static Unicode.RangeTable Radical { get; } Property Value Type Description Unicode.RangeTable Regional_Indicator Regional_Indicator is the set of Unicode characters with property Regional_Indicator. Declaration public static Unicode.RangeTable Regional_Indicator { get; } Property Value Type Description Unicode.RangeTable Sentence_Terminal Sentence_Terminal is the set of Unicode characters with property Sentence_Terminal. Declaration public static Unicode.RangeTable Sentence_Terminal { get; } Property Value Type Description Unicode.RangeTable Soft_Dotted Soft_Dotted is the set of Unicode characters with property Soft_Dotted. Declaration public static Unicode.RangeTable Soft_Dotted { get; } Property Value Type Description Unicode.RangeTable STerm STerm is an alias for Sentence_Terminal. Declaration public static Unicode.RangeTable STerm { get; } Property Value Type Description Unicode.RangeTable Terminal_Punctuation Terminal_Punctuation is the set of Unicode characters with property Terminal_Punctuation. Declaration public static Unicode.RangeTable Terminal_Punctuation { get; } Property Value Type Description Unicode.RangeTable Unified_Ideograph Unified_Ideograph is the set of Unicode characters with property Unified_Ideograph. Declaration public static Unicode.RangeTable Unified_Ideograph { get; } Property Value Type Description Unicode.RangeTable Variation_Selector Variation_Selector is the set of Unicode characters with property Variation_Selector. Declaration public static Unicode.RangeTable Variation_Selector { get; } Property Value Type Description Unicode.RangeTable White_Space White_Space is the set of Unicode characters with property White_Space. Declaration public static Unicode.RangeTable White_Space { get; } Property Value Type Description Unicode.RangeTable Methods Get(String) Retrieves the specified RangeTable having that property. Declaration public static Unicode.RangeTable Get(string propertyName) Parameters Type Name Description System.String propertyName The property name. Returns Type Description Unicode.RangeTable"
  },
  "api/NStack/NStack.Unicode.RangeTable.html": {
    "href": "api/NStack/NStack.Unicode.RangeTable.html",
    "title": "Struct Unicode.RangeTable",
    "keywords": "Struct Unicode.RangeTable Range tables describe classes of unicode code points. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NStack Assembly : NStack.dll Syntax public struct RangeTable Fields LatinOffset The number of entries in the short range table (R16) with Hi being less than MaxLatin1 Declaration public readonly int LatinOffset Field Value Type Description System.Int32 Methods InRange(UInt32) Used to determine if a given rune is in the range of this RangeTable. Declaration public bool InRange(uint rune) Parameters Type Name Description System.UInt32 rune Rune. Returns Type Description System.Boolean true , if the rune is in this RangeTable, false otherwise. IsExcludingLatin(UInt32) Used to determine if a given rune is in the range of this RangeTable, excluding latin1 characters. Declaration public bool IsExcludingLatin(uint rune) Parameters Type Name Description System.UInt32 rune Rune. Returns Type Description System.Boolean true , if the rune is part of the range (not including latin), false otherwise."
  },
  "api/NStack/NStack.Unicode.Script.html": {
    "href": "api/NStack/NStack.Unicode.Script.html",
    "title": "Class Unicode.Script",
    "keywords": "Class Unicode.Script Static class containing the Unicode script tables. Inheritance System.Object Unicode.Script Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : NStack Assembly : NStack.dll Syntax public static class Script Remarks There are static properties that can be used to fetch a specific category, or you can use the NStack.Unicode.Script.Get method in this class to retrieve the range table by its script name Properties Adlam Adlam is the set of Unicode characters in script Adlam. Declaration public static Unicode.RangeTable Adlam { get; } Property Value Type Description Unicode.RangeTable Ahom Ahom is the set of Unicode characters in script Ahom. Declaration public static Unicode.RangeTable Ahom { get; } Property Value Type Description Unicode.RangeTable Anatolian_Hieroglyphs Anatolian_Hieroglyphs is the set of Unicode characters in script Anatolian_Hieroglyphs. Declaration public static Unicode.RangeTable Anatolian_Hieroglyphs { get; } Property Value Type Description Unicode.RangeTable Arabic Arabic is the set of Unicode characters in script Arabic. Declaration public static Unicode.RangeTable Arabic { get; } Property Value Type Description Unicode.RangeTable Armenian Armenian is the set of Unicode characters in script Armenian. Declaration public static Unicode.RangeTable Armenian { get; } Property Value Type Description Unicode.RangeTable Avestan Avestan is the set of Unicode characters in script Avestan. Declaration public static Unicode.RangeTable Avestan { get; } Property Value Type Description Unicode.RangeTable Balinese Balinese is the set of Unicode characters in script Balinese. Declaration public static Unicode.RangeTable Balinese { get; } Property Value Type Description Unicode.RangeTable Bamum Bamum is the set of Unicode characters in script Bamum. Declaration public static Unicode.RangeTable Bamum { get; } Property Value Type Description Unicode.RangeTable Bassa_Vah Bassa_Vah is the set of Unicode characters in script Bassa_Vah. Declaration public static Unicode.RangeTable Bassa_Vah { get; } Property Value Type Description Unicode.RangeTable Batak Batak is the set of Unicode characters in script Batak. Declaration public static Unicode.RangeTable Batak { get; } Property Value Type Description Unicode.RangeTable Bengali Bengali is the set of Unicode characters in script Bengali. Declaration public static Unicode.RangeTable Bengali { get; } Property Value Type Description Unicode.RangeTable Bhaiksuki Bhaiksuki is the set of Unicode characters in script Bhaiksuki. Declaration public static Unicode.RangeTable Bhaiksuki { get; } Property Value Type Description Unicode.RangeTable Bopomofo Bopomofo is the set of Unicode characters in script Bopomofo. Declaration public static Unicode.RangeTable Bopomofo { get; } Property Value Type Description Unicode.RangeTable Brahmi Brahmi is the set of Unicode characters in script Brahmi. Declaration public static Unicode.RangeTable Brahmi { get; } Property Value Type Description Unicode.RangeTable Braille Braille is the set of Unicode characters in script Braille. Declaration public static Unicode.RangeTable Braille { get; } Property Value Type Description Unicode.RangeTable Buginese Buginese is the set of Unicode characters in script Buginese. Declaration public static Unicode.RangeTable Buginese { get; } Property Value Type Description Unicode.RangeTable Buhid Buhid is the set of Unicode characters in script Buhid. Declaration public static Unicode.RangeTable Buhid { get; } Property Value Type Description Unicode.RangeTable Canadian_Aboriginal Canadian_Aboriginal is the set of Unicode characters in script Canadian_Aboriginal. Declaration public static Unicode.RangeTable Canadian_Aboriginal { get; } Property Value Type Description Unicode.RangeTable Carian Carian is the set of Unicode characters in script Carian. Declaration public static Unicode.RangeTable Carian { get; } Property Value Type Description Unicode.RangeTable Caucasian_Albanian Caucasian_Albanian is the set of Unicode characters in script Caucasian_Albanian. Declaration public static Unicode.RangeTable Caucasian_Albanian { get; } Property Value Type Description Unicode.RangeTable Chakma Chakma is the set of Unicode characters in script Chakma. Declaration public static Unicode.RangeTable Chakma { get; } Property Value Type Description Unicode.RangeTable Cham Cham is the set of Unicode characters in script Cham. Declaration public static Unicode.RangeTable Cham { get; } Property Value Type Description Unicode.RangeTable Cherokee Cherokee is the set of Unicode characters in script Cherokee. Declaration public static Unicode.RangeTable Cherokee { get; } Property Value Type Description Unicode.RangeTable Chorasmian Chorasmian is the set of Unicode characters in script Chorasmian. Declaration public static Unicode.RangeTable Chorasmian { get; } Property Value Type Description Unicode.RangeTable Common Common is the set of Unicode characters in script Common. Declaration public static Unicode.RangeTable Common { get; } Property Value Type Description Unicode.RangeTable Coptic Coptic is the set of Unicode characters in script Coptic. Declaration public static Unicode.RangeTable Coptic { get; } Property Value Type Description Unicode.RangeTable Cuneiform Cuneiform is the set of Unicode characters in script Cuneiform. Declaration public static Unicode.RangeTable Cuneiform { get; } Property Value Type Description Unicode.RangeTable Cypriot Cypriot is the set of Unicode characters in script Cypriot. Declaration public static Unicode.RangeTable Cypriot { get; } Property Value Type Description Unicode.RangeTable Cypro_Minoan Cypro_Minoan is the set of Unicode characters in script Cypro_Minoan. Declaration public static Unicode.RangeTable Cypro_Minoan { get; } Property Value Type Description Unicode.RangeTable Cyrillic Cyrillic is the set of Unicode characters in script Cyrillic. Declaration public static Unicode.RangeTable Cyrillic { get; } Property Value Type Description Unicode.RangeTable Deseret Deseret is the set of Unicode characters in script Deseret. Declaration public static Unicode.RangeTable Deseret { get; } Property Value Type Description Unicode.RangeTable Devanagari Devanagari is the set of Unicode characters in script Devanagari. Declaration public static Unicode.RangeTable Devanagari { get; } Property Value Type Description Unicode.RangeTable Dives_Akuru Dives_Akuru is the set of Unicode characters in script Dives_Akuru. Declaration public static Unicode.RangeTable Dives_Akuru { get; } Property Value Type Description Unicode.RangeTable Dogra Dogra is the set of Unicode characters in script Dogra. Declaration public static Unicode.RangeTable Dogra { get; } Property Value Type Description Unicode.RangeTable Duployan Duployan is the set of Unicode characters in script Duployan. Declaration public static Unicode.RangeTable Duployan { get; } Property Value Type Description Unicode.RangeTable Egyptian_Hieroglyphs Egyptian_Hieroglyphs is the set of Unicode characters in script Egyptian_Hieroglyphs. Declaration public static Unicode.RangeTable Egyptian_Hieroglyphs { get; } Property Value Type Description Unicode.RangeTable Elbasan Elbasan is the set of Unicode characters in script Elbasan. Declaration public static Unicode.RangeTable Elbasan { get; } Property Value Type Description Unicode.RangeTable Elymaic Elymaic is the set of Unicode characters in script Elymaic. Declaration public static Unicode.RangeTable Elymaic { get; } Property Value Type Description Unicode.RangeTable Ethiopic Ethiopic is the set of Unicode characters in script Ethiopic. Declaration public static Unicode.RangeTable Ethiopic { get; } Property Value Type Description Unicode.RangeTable Georgian Georgian is the set of Unicode characters in script Georgian. Declaration public static Unicode.RangeTable Georgian { get; } Property Value Type Description Unicode.RangeTable Glagolitic Glagolitic is the set of Unicode characters in script Glagolitic. Declaration public static Unicode.RangeTable Glagolitic { get; } Property Value Type Description Unicode.RangeTable Gothic Gothic is the set of Unicode characters in script Gothic. Declaration public static Unicode.RangeTable Gothic { get; } Property Value Type Description Unicode.RangeTable Grantha Grantha is the set of Unicode characters in script Grantha. Declaration public static Unicode.RangeTable Grantha { get; } Property Value Type Description Unicode.RangeTable Greek Greek is the set of Unicode characters in script Greek. Declaration public static Unicode.RangeTable Greek { get; } Property Value Type Description Unicode.RangeTable Gujarati Gujarati is the set of Unicode characters in script Gujarati. Declaration public static Unicode.RangeTable Gujarati { get; } Property Value Type Description Unicode.RangeTable Gunjala_Gondi Gunjala_Gondi is the set of Unicode characters in script Gunjala_Gondi. Declaration public static Unicode.RangeTable Gunjala_Gondi { get; } Property Value Type Description Unicode.RangeTable Gurmukhi Gurmukhi is the set of Unicode characters in script Gurmukhi. Declaration public static Unicode.RangeTable Gurmukhi { get; } Property Value Type Description Unicode.RangeTable Han Han is the set of Unicode characters in script Han. Declaration public static Unicode.RangeTable Han { get; } Property Value Type Description Unicode.RangeTable Hangul Hangul is the set of Unicode characters in script Hangul. Declaration public static Unicode.RangeTable Hangul { get; } Property Value Type Description Unicode.RangeTable Hanifi_Rohingya Hanifi_Rohingya is the set of Unicode characters in script Hanifi_Rohingya. Declaration public static Unicode.RangeTable Hanifi_Rohingya { get; } Property Value Type Description Unicode.RangeTable Hanunoo Hanunoo is the set of Unicode characters in script Hanunoo. Declaration public static Unicode.RangeTable Hanunoo { get; } Property Value Type Description Unicode.RangeTable Hatran Hatran is the set of Unicode characters in script Hatran. Declaration public static Unicode.RangeTable Hatran { get; } Property Value Type Description Unicode.RangeTable Hebrew Hebrew is the set of Unicode characters in script Hebrew. Declaration public static Unicode.RangeTable Hebrew { get; } Property Value Type Description Unicode.RangeTable Hiragana Hiragana is the set of Unicode characters in script Hiragana. Declaration public static Unicode.RangeTable Hiragana { get; } Property Value Type Description Unicode.RangeTable Imperial_Aramaic Imperial_Aramaic is the set of Unicode characters in script Imperial_Aramaic. Declaration public static Unicode.RangeTable Imperial_Aramaic { get; } Property Value Type Description Unicode.RangeTable Inherited Inherited is the set of Unicode characters in script Inherited. Declaration public static Unicode.RangeTable Inherited { get; } Property Value Type Description Unicode.RangeTable Inscriptional_Pahlavi Inscriptional_Pahlavi is the set of Unicode characters in script Inscriptional_Pahlavi. Declaration public static Unicode.RangeTable Inscriptional_Pahlavi { get; } Property Value Type Description Unicode.RangeTable Inscriptional_Parthian Inscriptional_Parthian is the set of Unicode characters in script Inscriptional_Parthian. Declaration public static Unicode.RangeTable Inscriptional_Parthian { get; } Property Value Type Description Unicode.RangeTable Javanese Javanese is the set of Unicode characters in script Javanese. Declaration public static Unicode.RangeTable Javanese { get; } Property Value Type Description Unicode.RangeTable Kaithi Kaithi is the set of Unicode characters in script Kaithi. Declaration public static Unicode.RangeTable Kaithi { get; } Property Value Type Description Unicode.RangeTable Kannada Kannada is the set of Unicode characters in script Kannada. Declaration public static Unicode.RangeTable Kannada { get; } Property Value Type Description Unicode.RangeTable Katakana Katakana is the set of Unicode characters in script Katakana. Declaration public static Unicode.RangeTable Katakana { get; } Property Value Type Description Unicode.RangeTable Kayah_Li Kayah_Li is the set of Unicode characters in script Kayah_Li. Declaration public static Unicode.RangeTable Kayah_Li { get; } Property Value Type Description Unicode.RangeTable Kharoshthi Kharoshthi is the set of Unicode characters in script Kharoshthi. Declaration public static Unicode.RangeTable Kharoshthi { get; } Property Value Type Description Unicode.RangeTable Khitan_Small_Script Khitan_Small_Script is the set of Unicode characters in script Khitan_Small_Script. Declaration public static Unicode.RangeTable Khitan_Small_Script { get; } Property Value Type Description Unicode.RangeTable Khmer Khmer is the set of Unicode characters in script Khmer. Declaration public static Unicode.RangeTable Khmer { get; } Property Value Type Description Unicode.RangeTable Khojki Khojki is the set of Unicode characters in script Khojki. Declaration public static Unicode.RangeTable Khojki { get; } Property Value Type Description Unicode.RangeTable Khudawadi Khudawadi is the set of Unicode characters in script Khudawadi. Declaration public static Unicode.RangeTable Khudawadi { get; } Property Value Type Description Unicode.RangeTable Lao Lao is the set of Unicode characters in script Lao. Declaration public static Unicode.RangeTable Lao { get; } Property Value Type Description Unicode.RangeTable Latin Latin is the set of Unicode characters in script Latin. Declaration public static Unicode.RangeTable Latin { get; } Property Value Type Description Unicode.RangeTable Lepcha Lepcha is the set of Unicode characters in script Lepcha. Declaration public static Unicode.RangeTable Lepcha { get; } Property Value Type Description Unicode.RangeTable Limbu Limbu is the set of Unicode characters in script Limbu. Declaration public static Unicode.RangeTable Limbu { get; } Property Value Type Description Unicode.RangeTable Linear_A Linear_A is the set of Unicode characters in script Linear_A. Declaration public static Unicode.RangeTable Linear_A { get; } Property Value Type Description Unicode.RangeTable Linear_B Linear_B is the set of Unicode characters in script Linear_B. Declaration public static Unicode.RangeTable Linear_B { get; } Property Value Type Description Unicode.RangeTable Lisu Lisu is the set of Unicode characters in script Lisu. Declaration public static Unicode.RangeTable Lisu { get; } Property Value Type Description Unicode.RangeTable Lycian Lycian is the set of Unicode characters in script Lycian. Declaration public static Unicode.RangeTable Lycian { get; } Property Value Type Description Unicode.RangeTable Lydian Lydian is the set of Unicode characters in script Lydian. Declaration public static Unicode.RangeTable Lydian { get; } Property Value Type Description Unicode.RangeTable Mahajani Mahajani is the set of Unicode characters in script Mahajani. Declaration public static Unicode.RangeTable Mahajani { get; } Property Value Type Description Unicode.RangeTable Makasar Makasar is the set of Unicode characters in script Makasar. Declaration public static Unicode.RangeTable Makasar { get; } Property Value Type Description Unicode.RangeTable Malayalam Malayalam is the set of Unicode characters in script Malayalam. Declaration public static Unicode.RangeTable Malayalam { get; } Property Value Type Description Unicode.RangeTable Mandaic Mandaic is the set of Unicode characters in script Mandaic. Declaration public static Unicode.RangeTable Mandaic { get; } Property Value Type Description Unicode.RangeTable Manichaean Manichaean is the set of Unicode characters in script Manichaean. Declaration public static Unicode.RangeTable Manichaean { get; } Property Value Type Description Unicode.RangeTable Marchen Marchen is the set of Unicode characters in script Marchen. Declaration public static Unicode.RangeTable Marchen { get; } Property Value Type Description Unicode.RangeTable Masaram_Gondi Masaram_Gondi is the set of Unicode characters in script Masaram_Gondi. Declaration public static Unicode.RangeTable Masaram_Gondi { get; } Property Value Type Description Unicode.RangeTable Medefaidrin Medefaidrin is the set of Unicode characters in script Medefaidrin. Declaration public static Unicode.RangeTable Medefaidrin { get; } Property Value Type Description Unicode.RangeTable Meetei_Mayek Meetei_Mayek is the set of Unicode characters in script Meetei_Mayek. Declaration public static Unicode.RangeTable Meetei_Mayek { get; } Property Value Type Description Unicode.RangeTable Mende_Kikakui Mende_Kikakui is the set of Unicode characters in script Mende_Kikakui. Declaration public static Unicode.RangeTable Mende_Kikakui { get; } Property Value Type Description Unicode.RangeTable Meroitic_Cursive Meroitic_Cursive is the set of Unicode characters in script Meroitic_Cursive. Declaration public static Unicode.RangeTable Meroitic_Cursive { get; } Property Value Type Description Unicode.RangeTable Meroitic_Hieroglyphs Meroitic_Hieroglyphs is the set of Unicode characters in script Meroitic_Hieroglyphs. Declaration public static Unicode.RangeTable Meroitic_Hieroglyphs { get; } Property Value Type Description Unicode.RangeTable Miao Miao is the set of Unicode characters in script Miao. Declaration public static Unicode.RangeTable Miao { get; } Property Value Type Description Unicode.RangeTable Modi Modi is the set of Unicode characters in script Modi. Declaration public static Unicode.RangeTable Modi { get; } Property Value Type Description Unicode.RangeTable Mongolian Mongolian is the set of Unicode characters in script Mongolian. Declaration public static Unicode.RangeTable Mongolian { get; } Property Value Type Description Unicode.RangeTable Mro Mro is the set of Unicode characters in script Mro. Declaration public static Unicode.RangeTable Mro { get; } Property Value Type Description Unicode.RangeTable Multani Multani is the set of Unicode characters in script Multani. Declaration public static Unicode.RangeTable Multani { get; } Property Value Type Description Unicode.RangeTable Myanmar Myanmar is the set of Unicode characters in script Myanmar. Declaration public static Unicode.RangeTable Myanmar { get; } Property Value Type Description Unicode.RangeTable Nabataean Nabataean is the set of Unicode characters in script Nabataean. Declaration public static Unicode.RangeTable Nabataean { get; } Property Value Type Description Unicode.RangeTable Nandinagari Nandinagari is the set of Unicode characters in script Nandinagari. Declaration public static Unicode.RangeTable Nandinagari { get; } Property Value Type Description Unicode.RangeTable New_Tai_Lue New_Tai_Lue is the set of Unicode characters in script New_Tai_Lue. Declaration public static Unicode.RangeTable New_Tai_Lue { get; } Property Value Type Description Unicode.RangeTable Newa Newa is the set of Unicode characters in script Newa. Declaration public static Unicode.RangeTable Newa { get; } Property Value Type Description Unicode.RangeTable Nko Nko is the set of Unicode characters in script Nko. Declaration public static Unicode.RangeTable Nko { get; } Property Value Type Description Unicode.RangeTable Nushu Nushu is the set of Unicode characters in script Nushu. Declaration public static Unicode.RangeTable Nushu { get; } Property Value Type Description Unicode.RangeTable Nyiakeng_Puachue_Hmong Nyiakeng_Puachue_Hmong is the set of Unicode characters in script Nyiakeng_Puachue_Hmong. Declaration public static Unicode.RangeTable Nyiakeng_Puachue_Hmong { get; } Property Value Type Description Unicode.RangeTable Ogham Ogham is the set of Unicode characters in script Ogham. Declaration public static Unicode.RangeTable Ogham { get; } Property Value Type Description Unicode.RangeTable Ol_Chiki Ol_Chiki is the set of Unicode characters in script Ol_Chiki. Declaration public static Unicode.RangeTable Ol_Chiki { get; } Property Value Type Description Unicode.RangeTable Old_Hungarian Old_Hungarian is the set of Unicode characters in script Old_Hungarian. Declaration public static Unicode.RangeTable Old_Hungarian { get; } Property Value Type Description Unicode.RangeTable Old_Italic Old_Italic is the set of Unicode characters in script Old_Italic. Declaration public static Unicode.RangeTable Old_Italic { get; } Property Value Type Description Unicode.RangeTable Old_North_Arabian Old_North_Arabian is the set of Unicode characters in script Old_North_Arabian. Declaration public static Unicode.RangeTable Old_North_Arabian { get; } Property Value Type Description Unicode.RangeTable Old_Permic Old_Permic is the set of Unicode characters in script Old_Permic. Declaration public static Unicode.RangeTable Old_Permic { get; } Property Value Type Description Unicode.RangeTable Old_Persian Old_Persian is the set of Unicode characters in script Old_Persian. Declaration public static Unicode.RangeTable Old_Persian { get; } Property Value Type Description Unicode.RangeTable Old_Sogdian Old_Sogdian is the set of Unicode characters in script Old_Sogdian. Declaration public static Unicode.RangeTable Old_Sogdian { get; } Property Value Type Description Unicode.RangeTable Old_South_Arabian Old_South_Arabian is the set of Unicode characters in script Old_South_Arabian. Declaration public static Unicode.RangeTable Old_South_Arabian { get; } Property Value Type Description Unicode.RangeTable Old_Turkic Old_Turkic is the set of Unicode characters in script Old_Turkic. Declaration public static Unicode.RangeTable Old_Turkic { get; } Property Value Type Description Unicode.RangeTable Old_Uyghur Old_Uyghur is the set of Unicode characters in script Old_Uyghur. Declaration public static Unicode.RangeTable Old_Uyghur { get; } Property Value Type Description Unicode.RangeTable Oriya Oriya is the set of Unicode characters in script Oriya. Declaration public static Unicode.RangeTable Oriya { get; } Property Value Type Description Unicode.RangeTable Osage Osage is the set of Unicode characters in script Osage. Declaration public static Unicode.RangeTable Osage { get; } Property Value Type Description Unicode.RangeTable Osmanya Osmanya is the set of Unicode characters in script Osmanya. Declaration public static Unicode.RangeTable Osmanya { get; } Property Value Type Description Unicode.RangeTable Pahawh_Hmong Pahawh_Hmong is the set of Unicode characters in script Pahawh_Hmong. Declaration public static Unicode.RangeTable Pahawh_Hmong { get; } Property Value Type Description Unicode.RangeTable Palmyrene Palmyrene is the set of Unicode characters in script Palmyrene. Declaration public static Unicode.RangeTable Palmyrene { get; } Property Value Type Description Unicode.RangeTable Pau_Cin_Hau Pau_Cin_Hau is the set of Unicode characters in script Pau_Cin_Hau. Declaration public static Unicode.RangeTable Pau_Cin_Hau { get; } Property Value Type Description Unicode.RangeTable Phags_Pa Phags_Pa is the set of Unicode characters in script Phags_Pa. Declaration public static Unicode.RangeTable Phags_Pa { get; } Property Value Type Description Unicode.RangeTable Phoenician Phoenician is the set of Unicode characters in script Phoenician. Declaration public static Unicode.RangeTable Phoenician { get; } Property Value Type Description Unicode.RangeTable Psalter_Pahlavi Psalter_Pahlavi is the set of Unicode characters in script Psalter_Pahlavi. Declaration public static Unicode.RangeTable Psalter_Pahlavi { get; } Property Value Type Description Unicode.RangeTable Rejang Rejang is the set of Unicode characters in script Rejang. Declaration public static Unicode.RangeTable Rejang { get; } Property Value Type Description Unicode.RangeTable Runic Runic is the set of Unicode characters in script Runic. Declaration public static Unicode.RangeTable Runic { get; } Property Value Type Description Unicode.RangeTable Samaritan Samaritan is the set of Unicode characters in script Samaritan. Declaration public static Unicode.RangeTable Samaritan { get; } Property Value Type Description Unicode.RangeTable Saurashtra Saurashtra is the set of Unicode characters in script Saurashtra. Declaration public static Unicode.RangeTable Saurashtra { get; } Property Value Type Description Unicode.RangeTable Sharada Sharada is the set of Unicode characters in script Sharada. Declaration public static Unicode.RangeTable Sharada { get; } Property Value Type Description Unicode.RangeTable Shavian Shavian is the set of Unicode characters in script Shavian. Declaration public static Unicode.RangeTable Shavian { get; } Property Value Type Description Unicode.RangeTable Siddham Siddham is the set of Unicode characters in script Siddham. Declaration public static Unicode.RangeTable Siddham { get; } Property Value Type Description Unicode.RangeTable SignWriting SignWriting is the set of Unicode characters in script SignWriting. Declaration public static Unicode.RangeTable SignWriting { get; } Property Value Type Description Unicode.RangeTable Sinhala Sinhala is the set of Unicode characters in script Sinhala. Declaration public static Unicode.RangeTable Sinhala { get; } Property Value Type Description Unicode.RangeTable Sogdian Sogdian is the set of Unicode characters in script Sogdian. Declaration public static Unicode.RangeTable Sogdian { get; } Property Value Type Description Unicode.RangeTable Sora_Sompeng Sora_Sompeng is the set of Unicode characters in script Sora_Sompeng. Declaration public static Unicode.RangeTable Sora_Sompeng { get; } Property Value Type Description Unicode.RangeTable Soyombo Soyombo is the set of Unicode characters in script Soyombo. Declaration public static Unicode.RangeTable Soyombo { get; } Property Value Type Description Unicode.RangeTable Sundanese Sundanese is the set of Unicode characters in script Sundanese. Declaration public static Unicode.RangeTable Sundanese { get; } Property Value Type Description Unicode.RangeTable Syloti_Nagri Syloti_Nagri is the set of Unicode characters in script Syloti_Nagri. Declaration public static Unicode.RangeTable Syloti_Nagri { get; } Property Value Type Description Unicode.RangeTable Syriac Syriac is the set of Unicode characters in script Syriac. Declaration public static Unicode.RangeTable Syriac { get; } Property Value Type Description Unicode.RangeTable Tagalog Tagalog is the set of Unicode characters in script Tagalog. Declaration public static Unicode.RangeTable Tagalog { get; } Property Value Type Description Unicode.RangeTable Tagbanwa Tagbanwa is the set of Unicode characters in script Tagbanwa. Declaration public static Unicode.RangeTable Tagbanwa { get; } Property Value Type Description Unicode.RangeTable Tai_Le Tai_Le is the set of Unicode characters in script Tai_Le. Declaration public static Unicode.RangeTable Tai_Le { get; } Property Value Type Description Unicode.RangeTable Tai_Tham Tai_Tham is the set of Unicode characters in script Tai_Tham. Declaration public static Unicode.RangeTable Tai_Tham { get; } Property Value Type Description Unicode.RangeTable Tai_Viet Tai_Viet is the set of Unicode characters in script Tai_Viet. Declaration public static Unicode.RangeTable Tai_Viet { get; } Property Value Type Description Unicode.RangeTable Takri Takri is the set of Unicode characters in script Takri. Declaration public static Unicode.RangeTable Takri { get; } Property Value Type Description Unicode.RangeTable Tamil Tamil is the set of Unicode characters in script Tamil. Declaration public static Unicode.RangeTable Tamil { get; } Property Value Type Description Unicode.RangeTable Tangsa Tangsa is the set of Unicode characters in script Tangsa. Declaration public static Unicode.RangeTable Tangsa { get; } Property Value Type Description Unicode.RangeTable Tangut Tangut is the set of Unicode characters in script Tangut. Declaration public static Unicode.RangeTable Tangut { get; } Property Value Type Description Unicode.RangeTable Telugu Telugu is the set of Unicode characters in script Telugu. Declaration public static Unicode.RangeTable Telugu { get; } Property Value Type Description Unicode.RangeTable Thaana Thaana is the set of Unicode characters in script Thaana. Declaration public static Unicode.RangeTable Thaana { get; } Property Value Type Description Unicode.RangeTable Thai Thai is the set of Unicode characters in script Thai. Declaration public static Unicode.RangeTable Thai { get; } Property Value Type Description Unicode.RangeTable Tibetan Tibetan is the set of Unicode characters in script Tibetan. Declaration public static Unicode.RangeTable Tibetan { get; } Property Value Type Description Unicode.RangeTable Tifinagh Tifinagh is the set of Unicode characters in script Tifinagh. Declaration public static Unicode.RangeTable Tifinagh { get; } Property Value Type Description Unicode.RangeTable Tirhuta Tirhuta is the set of Unicode characters in script Tirhuta. Declaration public static Unicode.RangeTable Tirhuta { get; } Property Value Type Description Unicode.RangeTable Toto Toto is the set of Unicode characters in script Toto. Declaration public static Unicode.RangeTable Toto { get; } Property Value Type Description Unicode.RangeTable Ugaritic Ugaritic is the set of Unicode characters in script Ugaritic. Declaration public static Unicode.RangeTable Ugaritic { get; } Property Value Type Description Unicode.RangeTable Vai Vai is the set of Unicode characters in script Vai. Declaration public static Unicode.RangeTable Vai { get; } Property Value Type Description Unicode.RangeTable Vithkuqi Vithkuqi is the set of Unicode characters in script Vithkuqi. Declaration public static Unicode.RangeTable Vithkuqi { get; } Property Value Type Description Unicode.RangeTable Wancho Wancho is the set of Unicode characters in script Wancho. Declaration public static Unicode.RangeTable Wancho { get; } Property Value Type Description Unicode.RangeTable Warang_Citi Warang_Citi is the set of Unicode characters in script Warang_Citi. Declaration public static Unicode.RangeTable Warang_Citi { get; } Property Value Type Description Unicode.RangeTable Yezidi Yezidi is the set of Unicode characters in script Yezidi. Declaration public static Unicode.RangeTable Yezidi { get; } Property Value Type Description Unicode.RangeTable Yi Yi is the set of Unicode characters in script Yi. Declaration public static Unicode.RangeTable Yi { get; } Property Value Type Description Unicode.RangeTable Zanabazar_Square Zanabazar_Square is the set of Unicode characters in script Zanabazar_Square. Declaration public static Unicode.RangeTable Zanabazar_Square { get; } Property Value Type Description Unicode.RangeTable Methods Get(String) Retrieves the specified RangeTable from the Unicode script name. Declaration public static Unicode.RangeTable Get(string scriptName) Parameters Type Name Description System.String scriptName The unicode script name Returns Type Description Unicode.RangeTable"
  },
  "api/NStack/NStack.Unicode.SpecialCase.html": {
    "href": "api/NStack/NStack.Unicode.SpecialCase.html",
    "title": "Struct Unicode.SpecialCase",
    "keywords": "Struct Unicode.SpecialCase SpecialCase represents language-specific case mappings such as Turkish. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NStack Assembly : NStack.dll Syntax public struct SpecialCase Remarks Methods of SpecialCase customize (by overriding) the standard mappings. Methods ToLower(UInt32) ToLower maps the rune to lower case giving priority to the special mapping. Declaration public uint ToLower(uint rune) Parameters Type Name Description System.UInt32 rune Rune. Returns Type Description System.UInt32 The lower cased rune if it can be. ToTitle(UInt32) ToTitle maps the rune to title case giving priority to the special mapping. Declaration public uint ToTitle(uint rune) Parameters Type Name Description System.UInt32 rune Rune. Returns Type Description System.UInt32 The title cased rune if it can be. ToUpper(UInt32) ToUpper maps the rune to upper case giving priority to the special mapping. Declaration public uint ToUpper(uint rune) Parameters Type Name Description System.UInt32 rune Rune. Returns Type Description System.UInt32 The upper cased rune if it can be."
  },
  "api/NStack/NStack.ustring.html": {
    "href": "api/NStack/NStack.ustring.html",
    "title": "Class ustring",
    "keywords": "Class ustring ustrings are used to manipulate utf8 strings, either from byte arrays or blocks of memory. Inheritance System.Object ustring Implements System.IComparable < ustring > System.IComparable System.IConvertible System.Collections.Generic.IEnumerable < System.UInt32 > System.Collections.IEnumerable System.IEquatable < ustring > System.ICloneable Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : NStack Assembly : NStack.dll Syntax public abstract class ustring : IComparable<ustring>, IComparable, IConvertible, IEnumerable<uint>, IEnumerable, IEquatable<ustring>, ICloneable Remarks The ustring provides a series of string-like operations over an array of bytes. The buffer is expected to contain an UTF8 encoded string, but if the buffer contains an invalid utf8 sequence many of the operations will continue to work. The strings can be created either from byte arrays, a range within a byte array, or from a block of unmanaged memory. The ustrings are created using one of the Make or MakeCopy methods in the class, not by invoking the new operator on the class. Method Description NStack.ustring.Make(string) Creates a ustring from a C# string. NStack.ustring.Make(byte[]) Creates a ustring from a byte array. NStack.ustring.Make(byte[],int,int) Creates a ustring from a range in a byte array. NStack.ustring.Make(uint[]) Creates a ustring from a single rune. NStack.ustring.Make(char[]) Creates a ustring from a character array. NStack.ustring.Make(System.IntPtr,int,System.Action{System.IntPtr}) Creates a ustring from an unmanaged memory block, with an optional method to invoke to release the block when the ustring is garbage collected. Make(IntPtr, Action<IntPtr>) Creates a ustring from an unmanaged memory block that is null-terminated, suitable for interoperability with C APIs. It takes an optional method to invoke to release the block when the ustring is garbage collected. NStack.ustring.MakeCopy(System.IntPtr,int) Creates a ustring by making a copy of the provided memory block. MakeCopy(IntPtr) Creates a ustring by making a copy of the null-terminated memory block. Suitable for interoperability with C APIs. The Length property describes the length in bytes of the underlying array, while the RuneCount property describes the number of code points (or runes) that are represented by the underlying utf8 encoded buffer. The ustring supports slicing by calling the indexer with two arguments, the argument represent indexes into the underlying byte buffer. The starting index is inclusive, while the ending index is exclusive. Negative values can be used to index the string from the end. See the documentation for the indexer for more details. Fields Empty The empty ustring. Declaration public static ustring Empty Field Value Type Description ustring Properties ConsoleWidth Returns the number of columns used by the unicode string on console applications. This is done by calling the Rune.ColumnWidth on each rune. Declaration public int ConsoleWidth { get; } Property Value Type Description System.Int32 IsEmpty Gets a value indicating whether this ustring is empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean true if is empty (Length is zero); otherwise, false . Item[Int32] Returns the byte at the specified position. Declaration public abstract byte this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description System.Byte The byte encoded at the specified position. Remarks The index value should be between 0 and Length-1. Item[Int32, Int32] Returns a slice of the ustring delimited by the [start, end) range. If the range is invalid, the return is the Empty string. Declaration public ustring this[int start, int end] { get; } Parameters Type Name Description System.Int32 start Start index, this value is inclusive. If the value is negative, the value is added to the length, allowing this parameter to count to count from the end of the string. System.Int32 end End index, this value is exclusive. If the value is negative, the value is added to the length, plus one, allowing this parameter to count from the end of the string. Property Value Type Description ustring Remarks Some examples given the string \"1234567890\": The range [0, 4] produces \"1234\" The range [8, 10] produces \"90\" The range [8, null] produces \"90\" The range [-2, null] produces \"90\" The range [8, 9] produces \"9\" The range [-4, -1] produces \"789\" The range [-4, null] produces \"7890\" The range [-4, null] produces \"7890\" The range [-9, -3] produces \"234567\" The range [0, 0] produces the empty string This indexer does not raise exceptions for invalid indexes, instead the value returned is the ustring.Empty value: The range [100, 200] produces the ustring.Empty The range [-100, 0] produces ustring.Empty To simulate the optional end boundary, use the indexer that takes the object parameter and pass a null to it. For example, to fetch all elements from the position five until the end, use [5, null] Item[Int32, Object] Returns a slice of the ustring delimited by the [start, last-element-of-the-string range. If the range is invalid, the return is the Empty string. Declaration public ustring this[int start, object end] { get; } Parameters Type Name Description System.Int32 start Byte start index, this value is inclusive. If the value is negative, the value is added to the length, allowing this parameter to count to count from the end of the string. System.Object end Byte end index. This value is expected to be null to indicate that it should be the last element of the string. Property Value Type Description ustring Remarks This is a companion indexer to the indexer that takes two integers, it only exists to provide the optional end argument to mean \"until the end\", and to make the code that uses indexer look familiar, without having to resort to another API. Some examples given the string \"1234567890\": The indexes are byte indexes, they are not rune indexes. The range [8, null] produces \"90\" The range [-2, null] produces \"90\" The range [8, 9] produces \"9\" The range [-4, -1] produces \"789\" The range [-4, null] produces \"7890\" The range [-4, null] produces \"7890\" The range [-9, -3] produces \"234567\" This indexer does not raise exceptions for invalid indexes, instead the value returned is the ustring.Empty value: The range [100, 200] produces the ustring.Empty The range [-100, 0] produces ustring.Empty To simulate the optional end boundary, use the indexer that takes the object parameter and pass a null to it. For example, to fetch all elements from the position five until the end, use [5, null] Length Gets the length in bytes of the byte buffer. Declaration public abstract int Length { get; } Property Value Type Description System.Int32 The length in bytes of the encoded UTF8 string, does not represent the number of runes. Remarks To obtain the number of runes in the string, use the System.ustring.RuneCount property. RuneCount Gets the rune count of the string. Declaration public int RuneCount { get; } Property Value Type Description System.Int32 The rune count. Methods CompareTo(ustring) Implements the IComparable .CompareTo method Declaration public int CompareTo(ustring other) Parameters Type Name Description ustring other Value. Returns Type Description System.Int32 Less than zero if this instance is less than value, zero if they are the same, and higher than zero if the instance is greater. Concat(ustring[]) Concatenates the provided ustrings into a new ustring. Declaration public static ustring Concat(params ustring[] args) Parameters Type Name Description ustring [] args One or more ustrings. Returns Type Description ustring A new ustring that contains the concatenation of all the ustrings. Contains(ustring) Returns a value indicating whether a specified substring occurs within this string. Declaration public bool Contains(ustring substr) Parameters Type Name Description ustring substr The string to seek. Returns Type Description System.Boolean true if the substr parameter occurs within this string, or if substr is the empty string (\"\"); otherwise, false. Contains(UInt32) Returns a value indicating whether a specified rune occurs within this string. Declaration public bool Contains(uint rune) Parameters Type Name Description System.UInt32 rune The rune to seek. Returns Type Description System.Boolean true if the rune parameter occurs within this string; otherwise, false. ContainsAny(ustring) Returns a value indicating whether any of the characters in the provided string occurs within this string. Declaration public bool ContainsAny(ustring chars) Parameters Type Name Description ustring chars string containing one or more characters. Returns Type Description System.Boolean true if any of the characters in chars parameter occurs within this string; otherwise, false. ContainsAny(UInt32[]) Returns a value indicating whether any of the runes occurs within this string. Declaration public bool ContainsAny(params uint[] runes) Parameters Type Name Description System.UInt32 [] runes one or more runes. Returns Type Description System.Boolean true if any of the runes in runes parameter occurs within this string; otherwise, false. Copy() The Copy method makes a copy of the underlying data, it can be used to release the resources associated with an unmanaged buffer, or a ranged string. Declaration public ustring Copy() Returns Type Description ustring A copy of the underlying data. CopyTo(Int32, Byte[], Int32, Int32) Copies the specified number of bytes from the underlying ustring representation to the target array at the specified offset. Declaration public abstract void CopyTo(int fromOffset, byte[] target, int targetOffset, int count) Parameters Type Name Description System.Int32 fromOffset Offset in the underlying ustring buffer to copy from. System.Byte [] target Target array where the buffer contents will be copied to. System.Int32 targetOffset Offset into the target array where this will be copied to. System.Int32 count Number of bytes to copy. Count(ustring) Count the number of non-overlapping instances of substr in the string. Declaration public int Count(ustring substr) Parameters Type Name Description ustring substr Substr. Returns Type Description System.Int32 If substr is an empty string, Count returns 1 + the number of Unicode code points in the string, otherwise the count of non-overlapping instances in string. EndsWith(ustring) Determines whether the end of this string instance matches the specified string. Declaration public bool EndsWith(ustring suffix) Parameters Type Name Description ustring suffix The string to compare to the substring at the end of this instance. Returns Type Description System.Boolean true if suffix matches the end of this instance; otherwise, false. Equals(ustring) Determines whether the specified System.Object is equal to the current ustring . Declaration public bool Equals(ustring other) Parameters Type Name Description ustring other The other string to compare with the current ustring . Returns Type Description System.Boolean true if the specified ustring is equal to the current ustring; otherwise, false . Equals(Object) Determines whether the specified System.Object is equal to the current ustring . Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare with the current ustring . Returns Type Description System.Boolean true if the specified System.Object is equal to the current ustring ; otherwise, false . Overrides System.Object.Equals(System.Object) EqualsFold(ustring) Reports whether this string and the provided string, when interpreted as UTF-8 strings, are equal under Unicode case-folding Declaration public bool EqualsFold(ustring other) Parameters Type Name Description ustring other Other. Returns Type Description System.Boolean true , if fold was equaled, false otherwise. Explode(Int32) Explode splits the string into a slice of UTF-8 strings Declaration public ustring[] Explode(int limit = -1) Parameters Type Name Description System.Int32 limit Maximum number of entries to return, or -1 for no limits. Returns Type Description ustring [] , one string per unicode character, up to the specified limit. GetHashCode() Serves as a hash function for a ustring object. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table. Overrides System.Object.GetHashCode() GetRange(Int32, Int32) For internal use, returns the range of bytes specified. Declaration protected abstract ustring GetRange(int start, int end) Parameters Type Name Description System.Int32 start Start. System.Int32 end End. Returns Type Description ustring The range. IndexByte(Byte, Int32) Reports the zero-based index of the first occurrence of the specified byte in the underlying byte buffer. Declaration public int IndexByte(byte b, int offset) Parameters Type Name Description System.Byte b The byte to seek. System.Int32 offset Starting location. Returns Type Description System.Int32 The zero-based index position of b if that byte is found, or -1 if it is not. IndexOf(ustring, Int32) Reports the zero-based index of the first occurrence of a specified Unicode character or string within this instance. Declaration public int IndexOf(ustring substr, int offset = 0) Parameters Type Name Description ustring substr The string to seek. System.Int32 offset The search starting position. Returns Type Description System.Int32 The zero-based index position of value if that character is found, or -1 if it is not. The index position returned is relative to the start of the substring, not to the offset. IndexOf(ustring.RunePredicate) IndexOf returns the index into s of the first Unicode rune satisfying matchFunc(rune), or -1 if none do. Declaration public int IndexOf(ustring.RunePredicate matchFunc) Parameters Type Name Description ustring.RunePredicate matchFunc Match func, it receives a rune as a parameter and should return true if it matches, false otherwise. Returns Type Description System.Int32 The index inside the string where the rune is found, or -1 on error. IndexOf(UInt32, Int32) Reports the zero-based index of the first occurrence of the specified Unicode rune in this string Declaration public int IndexOf(uint rune, int offset = 0) Parameters Type Name Description System.UInt32 rune Rune. System.Int32 offset Starting offset to start the search from. Returns Type Description System.Int32 The zero-based index position of rune if that character is found, or -1 if it is not. If the rune is Utf8.RuneError, it returns the first instance of any invalid UTF-8 byte sequence. IndexOfAny(ustring) Reports the zero-based index of the first occurrence in this instance of any character in the provided string Declaration public int IndexOfAny(ustring chars) Parameters Type Name Description ustring chars ustring containing characters to seek. Returns Type Description System.Int32 The zero-based index position of the first occurrence in this instance where any character in chars was found; -1 if no character in chars was found. IndexOfAny(UInt32[]) Reports the zero-based index of the first occurrence in this instance of any runes in the provided string Declaration public int IndexOfAny(params uint[] runes) Parameters Type Name Description System.UInt32 [] runes ustring containing runes. Returns Type Description System.Int32 The zero-based index position of the first occurrence in this instance where any character in runes was found; -1 if no character in runes was found. IsNullOrEmpty(ustring) Represent the null or empty value related to the ustring. Declaration public static bool IsNullOrEmpty(ustring value) Parameters Type Name Description ustring value Returns Type Description System.Boolean IsSeparator(UInt32) IsSeparator reports whether the rune could mark a word boundary. Declaration public static bool IsSeparator(uint rune) Parameters Type Name Description System.UInt32 rune The rune to test. Returns Type Description System.Boolean true , if the rune can be considered a word boundary, false otherwise. Join(ustring, ustring[]) Concatenates all the elements of a ustring array, using the specified separator between each element. Declaration public static ustring Join(ustring separator, params ustring[] values) Parameters Type Name Description ustring separator Separator. ustring [] values Values. Returns Type Description ustring A string that consists of the elements in values delimited by the separator string. If values is an empty array, the method returns System.ustring.Empty . LastIndexByte(Byte) Reports the zero-based index position of the last occurrence of a specified byte on the underlying byte buffer. Declaration public int LastIndexByte(byte b) Parameters Type Name Description System.Byte b The byte to seek. Returns Type Description System.Int32 The zero-based index position of b if that byte is found, or -1 if it is not. LastIndexOf(ustring) Reports the zero-based index position of the last occurrence of a specified substring within this instance Declaration public int LastIndexOf(ustring substr) Parameters Type Name Description ustring substr The ustring to seek. Returns Type Description System.Int32 The zero-based index position of substr if that character is found, or -1 if it is not. LastIndexOf(ustring.RunePredicate) LastIndexOf returns the index into s of the last Unicode rune satisfying matchFunc(rune), or -1 if none do. Declaration public int LastIndexOf(ustring.RunePredicate matchFunc) Parameters Type Name Description ustring.RunePredicate matchFunc Match func, it receives a rune as a parameter and should return true if it matches, false otherwise. Returns Type Description System.Int32 The last index inside the string where the rune is found, or -1 on error. LastIndexOfAny(ustring) Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in the ustring. Declaration public int LastIndexOfAny(ustring chars) Parameters Type Name Description ustring chars The string containing characters to seek. Returns Type Description System.Int32 The index position of the last occurrence in this instance where any character in chars was found; -1 if no character in chars was found. Make(Byte[]) Initializes a new instance of the ustring class using the provided byte array for its storage. Declaration public static ustring Make(params byte[] buffer) Parameters Type Name Description System.Byte [] buffer Buffer containing the utf8 encoded string. Returns Type Description ustring Remarks No validation is performed on the contents of the byte buffer, so it might contains invalid UTF-8 sequences. No copy is made of the incoming byte buffer, so changes to it will be visible on the ustring. Make(Byte[], Int32, Int32) Initializes a new instance of the ustring class from a byte array. Declaration public static ustring Make(byte[] buffer, int start, int count) Parameters Type Name Description System.Byte [] buffer Buffer containing the utf8 encoded string. System.Int32 start Starting offset into the buffer. System.Int32 count Number of bytes to consume from the buffer. Returns Type Description ustring Remarks No validation is performed on the contents of the byte buffer, so it might contains invalid UTF-8 sequences. This will make a copy of the buffer range. Make(Char[]) Initializes a new instance of the ustring class from an array of C# characters. Declaration public static ustring Make(params char[] chars) Parameters Type Name Description System.Char [] chars Characters. Returns Type Description ustring Make(IEnumerable<Rune>) Initializes a new instance of the ustring class from an IEnumerable of runes Declaration public static ustring Make(IEnumerable<Rune> runes) Parameters Type Name Description System.Collections.Generic.IEnumerable < Rune > runes Runes. Returns Type Description ustring The make. Make(IList<Rune>) Initializes a new instance of the ustring class from an array of Runes. Declaration public static ustring Make(IList<Rune> runes) Parameters Type Name Description System.Collections.Generic.IList < Rune > runes Runes. Returns Type Description ustring The make. Make(IntPtr, Action<IntPtr>) Initializes a new instance of the ustring class from a null terminated block of memory. Declaration public static ustring Make(IntPtr block, Action<IntPtr> releaseFunc = null) Parameters Type Name Description System.IntPtr block Pointer to a block of memory, it is expected to be terminated by a 0 byte. System.Action < System.IntPtr > releaseFunc Optional method to invoke to release when this string is finalized to clear the associated resources, you can use this for example to release the unamanged resource to which the block belongs. Returns Type Description ustring Remarks This will return a ustring that represents the block of memory provided. The returned object will be a subclass of ustring that implements IDisposable, which you can use to trigger the synchronous execution of the releaseFunc . If you do not call Dispose manually, the provided release function will be invoked from the finalizer thread. Alternatively, if the block of data is something that you do not own, and you would like to make a copy of it, you might want to consider using the MakeCopy(IntPtr) method. Make(IntPtr, Int32, Action<IntPtr>) Initializes a new instance of the ustring class from a block of memory and a size. Declaration public static ustring Make(IntPtr block, int size, Action<IntPtr> releaseFunc = null) Parameters Type Name Description System.IntPtr block Pointer to a block of memory. System.Int32 size Number of bytes in the block to treat as a string. System.Action < System.IntPtr > releaseFunc Optional method to invoke to release when this string is finalized to clear the associated resources, you can use this for example to release the unamanged resource to which the block belongs. Returns Type Description ustring Remarks This will return a ustring that represents the block of memory provided. The returned object will be a subclass of ustring that implements IDisposable, which you can use to trigger the synchronous execution of the releaseFunc . If you do not call Dispose manually, the provided release function will be invoked from the finalizer thread. Alternatively, if the block of data is something that you do not own, and you would like to make a copy of it, you might want to consider using the NStack.ustring.MakeCopy(System.IntPtr,int) method. Make(Rune) Initializes a new instance using the provided rune as the sole character in the string. Declaration public static ustring Make(Rune rune) Parameters Type Name Description Rune rune Rune (short name for Unicode code point). Returns Type Description ustring Make(String) Initializes a new instance of the ustring class from a string. Declaration public static ustring Make(string str) Parameters Type Name Description System.String str C# String. Returns Type Description ustring Make(UInt32[]) Initializes a new instance of the ustring class from an array of uints, which contain CodePoints. Declaration public static ustring Make(uint[] runes) Parameters Type Name Description System.UInt32 [] runes Runes. Returns Type Description ustring The make. MakeCopy(IntPtr) Initializes a new instance of the ustring by making a copy of the null-terminated block of memory. Declaration public static ustring MakeCopy(IntPtr block) Parameters Type Name Description System.IntPtr block Pointer to a block of memory, it is expected to be terminated by a 0 byte. Returns Type Description ustring Remarks This will return a ustring that contains a copy of the zero-terminated buffer pointed to by block. This is useful to create a string returned from C on a region of memory whose lifecycle you do not control, so this will make a private copy of the buffer. MakeCopy(IntPtr, Int32) Initializes a new instance of the ustring by making a copy of the specified block. Declaration public static ustring MakeCopy(IntPtr block, int size) Parameters Type Name Description System.IntPtr block Pointer to a block of memory which will be copied into the string. System.Int32 size Number of bytes in the block to treat as a string. Returns Type Description ustring Remarks This will return a ustring that contains a copy of the buffer pointed to by block. This is useful when you do not control the lifecycle of the buffer pointed to and desire the convenience of a method that makes a copy of the data for you. Range() An enumerator that returns the index within the string, and the rune found at that location Declaration public IEnumerable<(int index, uint rune)> Range() Returns Type Description System.Collections.Generic.IEnumerable < System.ValueTuple < System.Int32 , System.UInt32 >> Enumerable object that can be used to iterate and get the index of the values at the same time. Remarks This is useful to iterate over the string and obtain both the index of the rune and the rune in the same call. This version does allocate an object for the enumerator, if you want to avoid the object allocation, you can use the following code to iterate over the contents of the string ustring mystr = \"hello\"; int byteLen = mystr.Length; for (int i = 0; i < byteLen;) { (var rune, var size) = Utf8.DecodeRune(mystr, i, i - byteLen); Console.WriteLine (\"Rune is: \" + rune); i += size; } Replace(ustring, ustring, Int32) Returns a new ustring with the non-overlapping instances of oldValue replaced with newValue. Declaration public ustring Replace(ustring oldValue, ustring newValue, int maxReplacements = -1) Parameters Type Name Description ustring oldValue Old value; if it is empty, the string matches at the beginning of the string and after each UTF-8 sequence, yielding up to k+1 replacements for a k-rune string. ustring newValue New value that will replace the oldValue. System.Int32 maxReplacements Optional, the maximum number of replacements. Negative values indicate that there should be no limit to the replacements. Returns Type Description ustring The replace. RuneAt(Int32) Returns the Rune encoded at the specified byte index . Declaration public Rune RuneAt(int index) Parameters Type Name Description System.Int32 index Index. Returns Type Description Rune The Rune which might be Rune.Error if the value at the specified index is not UTF8 compliant, for example because it is not a valid UTF8 encoding, or the buffer is too short. RuneSubstring(Int32, Int32) Returns the substring starting at the given position in rune index from the origin of the Utf8 string. Declaration public ustring RuneSubstring(int runeStart, int length = 0) Parameters Type Name Description System.Int32 runeStart Starting point, default value is 0. System.Int32 length The substring length. Returns Type Description ustring The substring starting at the specified offset. Split(ustring, Int32) Split the string using at every instance of a string separator Declaration public ustring[] Split(ustring separator, int n = -1) Parameters Type Name Description ustring separator Separator string. System.Int32 n Optional maximum number of results to return, or -1 for an unlimited result Returns Type Description ustring [] An array containing the individual strings, excluding the separator string. StartsWith(ustring) Determines whether the beginning of this string instance matches the specified string. Declaration public bool StartsWith(ustring prefix) Parameters Type Name Description ustring prefix Prefix. Returns Type Description System.Boolean true if prefix matches the beginning of this string; otherwise, false . Substring(Int32, Int32) Returns the substring starting at the given position in bytes from the origin of the Utf8 string. Use RuneSubstring to extract substrings based on the rune index, rather than the byte index inside the Utf8 encoded string. Declaration public ustring Substring(int byteStart, int length = 0) Parameters Type Name Description System.Int32 byteStart Starting point, default value is 0. System.Int32 length The substring length. Returns Type Description ustring The substring starting at the specified offset. Title() Converts the string to Title-case, that is every word (as determined by NStack.ustring.IsSeparator is Title cased. Declaration public ustring Title() Returns Type Description ustring A title-cased string. ToByteArray() Returns a version of the ustring as a byte array, it might allocate or return the internal byte buffer, depending on the backing implementation. Declaration public abstract byte[] ToByteArray() Returns Type Description System.Byte [] A byte array containing the contents of the ustring. Remarks The byte array contains either a copy of the underlying data, in the cases where the ustring was created from an unmanaged pointer or when the ustring was created by either slicing or from a range withing a byte array. Otherwise the returned array that is used by the ustring itself. ToLower() Returns a copy of the string s with all Unicode letters mapped to their lower case. Declaration public ustring ToLower() Returns Type Description ustring The lowercased string. ToLower(Unicode.SpecialCase) Returns a copy of the string s with all Unicode letters mapped to their lower case giving priority to the special casing rules. Declaration public ustring ToLower(Unicode.SpecialCase specialCase) Parameters Type Name Description Unicode.SpecialCase specialCase Returns Type Description ustring The string to uppercase. ToRuneList() Converts a ustring into a List of runes. Declaration public List<Rune> ToRuneList() Returns Type Description System.Collections.Generic.List < Rune > A list containing the runes for the string, it is not bound by any limits. ToRuneList(Int32) Converts a ustring into a rune array. Declaration public List<Rune> ToRuneList(int limit) Parameters Type Name Description System.Int32 limit Maximum number of entries to return, or -1 for no limits. Returns Type Description System.Collections.Generic.List < Rune > An array containing the runes for the string up to the specified limit. ToRunes(Int32) Converts a ustring into a rune array. Declaration public uint[] ToRunes(int limit = -1) Parameters Type Name Description System.Int32 limit Maximum number of entries to return, or -1 for no limits. Returns Type Description System.UInt32 [] An array containing the runes for the string up to the specified limit. ToTitle() Returns a copy of the string s with all Unicode letters mapped to their title case. Declaration public ustring ToTitle() Returns Type Description ustring The title-cased string. ToTitle(Unicode.SpecialCase) Returns a copy of the string s with all Unicode letters mapped to their title case giving priority to the special casing rules. Declaration public ustring ToTitle(Unicode.SpecialCase specialCase) Parameters Type Name Description Unicode.SpecialCase specialCase Returns Type Description ustring The string to uppercase. ToUpper() Returns a copy of the string s with all Unicode letters mapped to their upper case. Declaration public ustring ToUpper() Returns Type Description ustring The string to uppercase. ToUpper(Unicode.SpecialCase) Returns a copy of the string s with all Unicode letters mapped to their upper case giving priority to the special casing rules. Declaration public ustring ToUpper(Unicode.SpecialCase specialCase) Parameters Type Name Description Unicode.SpecialCase specialCase Returns Type Description ustring The string to uppercase. Trim(ustring.RunePredicate) Returns a slice of the string with all leading and trailing runes matching the predicate removed. Declaration public ustring Trim(ustring.RunePredicate predicate) Parameters Type Name Description ustring.RunePredicate predicate Predicate. Returns Type Description ustring The trim. TrimEnd(ustring) TrimEnd returns a slice of the string with all leading characters in cutset removed. Declaration public ustring TrimEnd(ustring cutset) Parameters Type Name Description ustring cutset Characters to remove. Returns Type Description ustring The slice of the string with all cutset characters removed. TrimEnd(ustring.RunePredicate) Returns a slice of the string with all trailing runes matching the predicate removed. Declaration public ustring TrimEnd(ustring.RunePredicate predicate) Parameters Type Name Description ustring.RunePredicate predicate Function that determines whether this character must be trimmed. Returns Type Description ustring The current string if the predicate does not match anything, or a slice of the string starting in the first rune after the predicate matched. TrimSpace() Returns a slice of the string with all leading and trailing space characters removed (as determined by NStack.Unicode.IsSpace() Declaration public ustring TrimSpace() Returns Type Description ustring The space. TrimStart(ustring) TrimStarts returns a slice of the string with all leading characters in cutset removed. Declaration public ustring TrimStart(ustring cutset) Parameters Type Name Description ustring cutset Characters to remove. Returns Type Description ustring The slice of the string with all cutset characters removed. TrimStart(ustring.RunePredicate) Returns a slice of the string with all leading runes matching the predicate removed. Declaration public ustring TrimStart(ustring.RunePredicate predicate) Parameters Type Name Description ustring.RunePredicate predicate Function that determines whether this character must be trimmed. Returns Type Description ustring The current string if the predicate does not match anything, or a slice of the string starting in the first rune after the predicate matched. Operators Addition(ustring, ustring) Concatenates the contents of two ustring instances. Declaration public static ustring operator +(ustring u1, ustring u2) Parameters Type Name Description ustring u1 The first ustring to add, can be null. ustring u2 The second ustring to add, can be null. Returns Type Description ustring The ustring that is the concatenation of the strings of u1 and u2 . Equality(ustring, ustring) Determines whether a specified instance of ustring is equal to another specified ustring , this means that the contents of the string are identical Declaration public static bool operator ==(ustring a, ustring b) Parameters Type Name Description ustring a The first ustring to compare. ustring b The second ustring to compare. Returns Type Description System.Boolean true if a and b are equal; otherwise, false . Implicit(Byte[] to ustring) Implicit conversion from a byte array into a ustring. Declaration public static implicit operator ustring(byte[] buffer) Parameters Type Name Description System.Byte [] buffer The buffer containing the data. Returns Type Description ustring The ustring wrapping the existing byte array. Remarks The returned string will keep a reference to the buffer, which means that changes done to the buffer will be reflected into the ustring. Implicit(String to ustring) Implicit conversion from a C# string into a ustring. Declaration public static implicit operator ustring(string str) Parameters Type Name Description System.String str The string to encode as a ustring. Returns Type Description ustring The ustring with the same contents as the string. Remarks This will allocate a byte array and copy the contents of the string encoded as UTF8 into it. Inequality(ustring, ustring) Determines whether a specified instance of ustring is not equal to another specified ustring . Declaration public static bool operator !=(ustring a, ustring b) Parameters Type Name Description ustring a The first ustring to compare. ustring b The second ustring to compare. Returns Type Description System.Boolean true if a and b are not equal; otherwise, false . Explicit Interface Implementations IEnumerable<UInt32>.GetEnumerator() Declaration IEnumerator<uint> IEnumerable<uint>.GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.UInt32 > IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator ICloneable.Clone() Declaration object ICloneable.Clone() Returns Type Description System.Object IComparable.CompareTo(Object) Declaration int IComparable.CompareTo(object value) Parameters Type Name Description System.Object value Returns Type Description System.Int32 IConvertible.GetTypeCode() Declaration TypeCode IConvertible.GetTypeCode() Returns Type Description System.TypeCode IConvertible.ToBoolean(IFormatProvider) Declaration bool IConvertible.ToBoolean(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider Returns Type Description System.Boolean IConvertible.ToByte(IFormatProvider) Declaration byte IConvertible.ToByte(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider Returns Type Description System.Byte IConvertible.ToChar(IFormatProvider) Declaration char IConvertible.ToChar(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider Returns Type Description System.Char IConvertible.ToDateTime(IFormatProvider) Declaration DateTime IConvertible.ToDateTime(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider Returns Type Description System.DateTime IConvertible.ToDecimal(IFormatProvider) Declaration decimal IConvertible.ToDecimal(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider Returns Type Description System.Decimal IConvertible.ToDouble(IFormatProvider) Declaration double IConvertible.ToDouble(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider Returns Type Description System.Double IConvertible.ToInt16(IFormatProvider) Declaration short IConvertible.ToInt16(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider Returns Type Description System.Int16 IConvertible.ToInt32(IFormatProvider) Declaration int IConvertible.ToInt32(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider Returns Type Description System.Int32 IConvertible.ToInt64(IFormatProvider) Declaration long IConvertible.ToInt64(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider Returns Type Description System.Int64 IConvertible.ToSByte(IFormatProvider) Declaration sbyte IConvertible.ToSByte(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider Returns Type Description System.SByte IConvertible.ToSingle(IFormatProvider) Declaration float IConvertible.ToSingle(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider Returns Type Description System.Single IConvertible.ToString(IFormatProvider) Declaration string IConvertible.ToString(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider Returns Type Description System.String IConvertible.ToType(Type, IFormatProvider) Declaration object IConvertible.ToType(Type conversionType, IFormatProvider provider) Parameters Type Name Description System.Type conversionType System.IFormatProvider provider Returns Type Description System.Object IConvertible.ToUInt16(IFormatProvider) Declaration ushort IConvertible.ToUInt16(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider Returns Type Description System.UInt16 IConvertible.ToUInt32(IFormatProvider) Declaration uint IConvertible.ToUInt32(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider Returns Type Description System.UInt32 IConvertible.ToUInt64(IFormatProvider) Declaration ulong IConvertible.ToUInt64(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider Returns Type Description System.UInt64 Implements System.IComparable<T> System.IComparable System.IConvertible System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable System.IEquatable<T> System.ICloneable Extension Methods RuneExtensions.FullRune(ustring) RuneExtensions.DecodeRune(ustring, Int32, Int32) RuneExtensions.DecodeLastRune(ustring, Int32) RuneExtensions.RuneCount(ustring) RuneExtensions.InvalidIndex(ustring) RuneExtensions.Valid(ustring) RuneExtensions.ExpectedSizeFromFirstByte(ustring)"
  },
  "api/NStack/NStack.ustring.RunePredicate.html": {
    "href": "api/NStack/NStack.ustring.RunePredicate.html",
    "title": "Delegate ustring.RunePredicate",
    "keywords": "Delegate ustring.RunePredicate Rune predicate functions take a rune as input and return a boolean determining if the rune matches or not. Namespace : NStack Assembly : NStack.dll Syntax public delegate bool RunePredicate(uint rune); Parameters Type Name Description System.UInt32 rune Returns Type Description System.Boolean"
  },
  "api/NStack/NStack.Utf8.html": {
    "href": "api/NStack/NStack.Utf8.html",
    "title": "Class Utf8",
    "keywords": "Class Utf8 UTF8 Helper methods and routines. Inheritance System.Object Utf8 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : NStack Assembly : NStack.dll Syntax public static class Utf8 Remarks The term \"rune\" is used to represent a Unicode code point merely because it is a shorter way of talking about it. Fields MaxRune Maximum valid Unicode code point. Declaration public const uint MaxRune = 1114111U Field Value Type Description System.UInt32 RuneError The \"error\" Rune or \"Unicode replacement character\" Declaration public static uint RuneError Field Value Type Description System.UInt32 RuneSelf Characters below RuneSelf are represented as themselves in a single byte Declaration public const byte RuneSelf = 128 Field Value Type Description System.Byte Utf8Max Maximum number of bytes required to encode every unicode code point. Declaration public const int Utf8Max = 4 Field Value Type Description System.Int32 Methods DecodeLastRune(ustring, Int32) DecodeLastRune unpacks the last UTF-8 encoding in the ustring. Declaration public static (uint Rune, int size) DecodeLastRune(ustring str, int end = -1) Parameters Type Name Description ustring str String to decode rune from; if it is empty, it returns (RuneError, 0). Otherwise, if the encoding is invalid, it returns (RuneError, 1). Both are impossible results for correct, non-empty UTF-8. System.Int32 end Scan up to that point, if the value is -1, it sets the value to the lenght of the buffer. Returns Type Description System.ValueTuple < System.UInt32 , System.Int32 > The last rune and its width in bytes. Remarks An encoding is invalid if it is incorrect UTF-8, encodes a rune that is out of range, or is not the shortest possible UTF-8 encoding for the value. No other validation is performed. DecodeLastRune(Byte[], Int32) DecodeLastRune unpacks the last UTF-8 encoding in buffer Declaration public static (uint Rune, int size) DecodeLastRune(byte[] buffer, int end = -1) Parameters Type Name Description System.Byte [] buffer Buffer to decode rune from; if it is empty, it returns (RuneError, 0). Otherwise, if the encoding is invalid, it returns (RuneError, 1). Both are impossible results for correct, non-empty UTF-8. System.Int32 end Scan up to that point, if the value is -1, it sets the value to the lenght of the buffer. Returns Type Description System.ValueTuple < System.UInt32 , System.Int32 > The last rune and its width in bytes. Remarks An encoding is invalid if it is incorrect UTF-8, encodes a rune that is out of range, or is not the shortest possible UTF-8 encoding for the value. No other validation is performed. DecodeRune(ustring, Int32, Int32) DecodeRune unpacks the first UTF-8 encoding in the ustring returns the rune and its width in bytes. Declaration public static (uint Rune, int size) DecodeRune(ustring str, int start = 0, int n = -1) Parameters Type Name Description ustring str ustring to decode. System.Int32 start Starting offset to look into.. System.Int32 n Number of bytes valid in the buffer, or -1 to make it the lenght of the buffer. Returns Type Description System.ValueTuple < System.UInt32 , System.Int32 > If p is empty it returns (RuneError, 0). Otherwise, if the encoding is invalid, it returns (RuneError, 1). Both are impossible results for correct, non-empty UTF-8. DecodeRune(Byte[], Int32, Int32) DecodeRune unpacks the first UTF-8 encoding in p and returns the rune and its width in bytes. Declaration public static (uint Rune, int Size) DecodeRune(byte[] buffer, int start = 0, int n = -1) Parameters Type Name Description System.Byte [] buffer Byte buffer containing the utf8 string. System.Int32 start Starting offset to look into.. System.Int32 n Number of bytes valid in the buffer, or -1 to make it the lenght of the buffer. Returns Type Description System.ValueTuple < System.UInt32 , System.Int32 > If p is empty it returns (RuneError, 0). Otherwise, if the encoding is invalid, it returns (RuneError, 1). Both are impossible results for correct, non-empty UTF-8. EncodeRune(UInt32, Byte[], Int32) Writes into the destination buffer starting at offset the UTF8 encoded version of the rune Declaration public static int EncodeRune(uint rune, byte[] dest, int offset = 0) Parameters Type Name Description System.UInt32 rune Rune to encode. System.Byte [] dest Destination buffer. System.Int32 offset Offset into the destination buffer. Returns Type Description System.Int32 The number of bytes written into the destination buffer. FullRune(ustring) FullRune reports whether the ustring begins with a full UTF-8 encoding of a rune. An invalid encoding is considered a full Rune since it will convert as a width-1 error rune. Declaration public static bool FullRune(ustring str) Parameters Type Name Description ustring str The string to check. Returns Type Description System.Boolean true , if the bytes in p begin with a full UTF-8 encoding of a rune, false otherwise. FullRune(Byte[]) FullRune reports whether the bytes in p begin with a full UTF-8 encoding of a rune. An invalid encoding is considered a full Rune since it will convert as a width-1 error rune. Declaration public static bool FullRune(byte[] p) Parameters Type Name Description System.Byte [] p byte array. Returns Type Description System.Boolean true , if the bytes in p begin with a full UTF-8 encoding of a rune, false otherwise. InvalidIndex(ustring) Use to find the index of the first invalid utf8 byte sequence in a buffer Declaration public static int InvalidIndex(ustring str) Parameters Type Name Description ustring str String containing the utf8 buffer. Returns Type Description System.Int32 The index of the first insvalid byte sequence or -1 if the entire buffer is valid. InvalidIndex(Byte[]) Use to find the index of the first invalid utf8 byte sequence in a buffer Declaration public static int InvalidIndex(byte[] buffer) Parameters Type Name Description System.Byte [] buffer Buffer containing the utf8 buffer. Returns Type Description System.Int32 The index of the first insvalid byte sequence or -1 if the entire buffer is valid. RuneCount(ustring) Returns the number of runes in a ustring. Declaration public static int RuneCount(ustring str) Parameters Type Name Description ustring str utf8 string. Returns Type Description System.Int32 Numnber of runes. RuneCount(Byte[], Int32, Int32) Returns the number of runes in a utf8 encoded buffer Declaration public static int RuneCount(byte[] buffer, int offset = 0, int count = -1) Parameters Type Name Description System.Byte [] buffer Byte buffer containing a utf8 string. System.Int32 offset Starting offset in the buffer. System.Int32 count Number of bytes to process in buffer, or -1 to process until the end of the buffer. Returns Type Description System.Int32 Numnber of runes. RuneLen(UInt32) number of bytes required to encode the rune. Declaration public static int RuneLen(uint rune) Parameters Type Name Description System.UInt32 rune Rune to probe. Returns Type Description System.Int32 The length, or -1 if the rune is not a valid value to encode in UTF-8. Valid(ustring) Reports whether the ustring consists entirely of valid UTF-8-encoded runes. Declaration public static bool Valid(ustring str) Parameters Type Name Description ustring str String to validate. Returns Type Description System.Boolean Valid(Byte[]) Reports whether p consists entirely of valid UTF-8-encoded runes. Declaration public static bool Valid(byte[] buffer) Parameters Type Name Description System.Byte [] buffer Byte buffer containing a utf8 string. Returns Type Description System.Boolean ValidRune(UInt32) ValidRune reports whether a rune can be legally encoded as UTF-8. Declaration public static bool ValidRune(uint rune) Parameters Type Name Description System.UInt32 rune The rune to test. Returns Type Description System.Boolean true , if rune is valid, false otherwise."
  },
  "api/NStack/System.html": {
    "href": "api/NStack/System.html",
    "title": "Namespace System",
    "keywords": "Namespace System Classes RuneExtensions Helper class that implements Rune extensions for the ustring type. Structs Rune A Rune represents a Unicode CodePoint storing the contents in a 32-bit value Enums Rune.Case The types of cases supported."
  },
  "api/NStack/System.Rune.Case.html": {
    "href": "api/NStack/System.Rune.Case.html",
    "title": "Enum Rune.Case",
    "keywords": "Enum Rune.Case The types of cases supported. Namespace : System Assembly : NStack.dll Syntax public enum Case Fields Name Description Lower Lower case Title Title case capitalizes the first letter, and keeps the rest in lowercase. Sometimes it is not as straight forward as the uppercase, some characters require special handling, like certain ligatures and Greek characters. Upper Upper case"
  },
  "api/NStack/System.Rune.html": {
    "href": "api/NStack/System.Rune.html",
    "title": "Struct Rune",
    "keywords": "Struct Rune A Rune represents a Unicode CodePoint storing the contents in a 32-bit value Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : System Assembly : NStack.dll Syntax public struct Rune Remarks Constructors Rune(Char) Initializes a new instance of the Rune from a character value. Declaration public Rune(char ch) Parameters Type Name Description System.Char ch C# characters. Rune(UInt32) Initializes a new instance of the Rune from a unsigned integer. Declaration public Rune(uint rune) Parameters Type Name Description System.UInt32 rune Unsigned integer. Remarks The value does not have to be a valid Unicode code point, this API will create an instance of Rune regardless of the whether it is in range or not. Rune(UInt32, UInt32) Initializes a new instance of the Rune from a surrogate pair value. Declaration public Rune(uint highSurrogate, uint lowSurrogate) Parameters Type Name Description System.UInt32 highSurrogate The high surrogate code point. System.UInt32 lowSurrogate The low surrogate code point. Fields Error The \"error\" Rune or \"Unicode replacement character\" Declaration public static Rune Error Field Value Type Description Rune MaxRune Maximum valid Unicode code point. Declaration public static Rune MaxRune Field Value Type Description Rune ReplacementChar Represents invalid code points. Declaration public static Rune ReplacementChar Field Value Type Description Rune RuneSelf Characters below RuneSelf are represented as themselves in a single byte Declaration public const byte RuneSelf = 128 Field Value Type Description System.Byte Utf8Max Maximum number of bytes required to encode every unicode code point. Declaration public const int Utf8Max = 4 Field Value Type Description System.Int32 Properties IsNonSpacing Check if the rune is a non-spacing character. Declaration public readonly bool IsNonSpacing { get; } Property Value Type Description System.Boolean True if is a non-spacing character, false otherwise. IsSurrogate Gets a value indicating whether this Rune is a surrogate code point. Declaration public readonly bool IsSurrogate { get; } Property Value Type Description System.Boolean true If is a surrogate code point, false otherwise. IsSurrogatePair Gets a value indicating whether this Rune is a valid surrogate pair. Declaration public readonly bool IsSurrogatePair { get; } Property Value Type Description System.Boolean true If is a valid surrogate pair, false otherwise. IsValid Gets a value indicating whether this Rune can be encoded as UTF-8 Declaration public readonly bool IsValid { get; } Property Value Type Description System.Boolean true if is valid; otherwise, false . Value Gets the rune unsigned integer value. Declaration public readonly uint Value { get; } Property Value Type Description System.UInt32 Methods ColumnWidth(Char) Number of column positions of a wide-character code. This is used to measure runes as displayed by text-based terminals. Declaration public static int ColumnWidth(char c) Parameters Type Name Description System.Char c The char. Returns Type Description System.Int32 The width in columns, 0 if the argument is the null character, -1 if the value is not printable, otherwise the number of columns that the rune occupies. ColumnWidth(Rune) Number of column positions of a wide-character code. This is used to measure runes as displayed by text-based terminals. Declaration public static int ColumnWidth(Rune rune) Parameters Type Name Description Rune rune The rune. Returns Type Description System.Int32 The width in columns, 0 if the argument is the null character, -1 if the value is not printable, otherwise the number of columns that the rune occupies. DecodeLastRune(Byte[], Int32) DecodeLastRune unpacks the last UTF-8 encoding in buffer Declaration public static (Rune rune, int size) DecodeLastRune(byte[] buffer, int end = -1) Parameters Type Name Description System.Byte [] buffer Buffer to decode rune from; if it is empty, it returns (RuneError, 0). Otherwise, if the encoding is invalid, it returns (RuneError, 1). Both are impossible results for correct, non-empty UTF-8. System.Int32 end Scan up to that point, if the value is -1, it sets the value to the length of the buffer. Returns Type Description System.ValueTuple < Rune , System.Int32 > The last rune and its width in bytes. Remarks An encoding is invalid if it is incorrect UTF-8, encodes a rune that is out of range, or is not the shortest possible UTF-8 encoding for the value. No other validation is performed. DecodeRune(Byte[], Int32, Int32) DecodeRune unpacks the first UTF-8 encoding in p and returns the rune and its width in bytes. Declaration public static (Rune rune, int Size) DecodeRune(byte[] buffer, int start = 0, int n = -1) Parameters Type Name Description System.Byte [] buffer Byte buffer containing the utf8 string. System.Int32 start Starting offset to look into.. System.Int32 n Number of bytes valid in the buffer, or -1 to make it the length of the buffer. Returns Type Description System.ValueTuple < Rune , System.Int32 > If p is empty it returns (RuneError, 0). Otherwise, if the encoding is invalid, it returns (RuneError, 1). Both are impossible results for correct, non-empty UTF-8. DecodeSurrogatePair(String, out Char[]) Reports whether this Rune is a valid surrogate pair and can be decoded from UTF-16. Declaration public static bool DecodeSurrogatePair(string str, out char[] chars) Parameters Type Name Description System.String str The string. System.Char [] chars The chars if is valid. Empty otherwise. Returns Type Description System.Boolean true If is a valid surrogate pair, false otherwise. DecodeSurrogatePair(UInt32, out Char[]) Reports whether this Rune is a valid surrogate pair and can be decoded from UTF-16. Declaration public static bool DecodeSurrogatePair(uint rune, out char[] chars) Parameters Type Name Description System.UInt32 rune The rune System.Char [] chars The chars if is valid. Empty otherwise. Returns Type Description System.Boolean true If is a valid surrogate pair, false otherwise. EncodeRune(Rune, Byte[], Int32) Writes into the destination buffer starting at offset the UTF8 encoded version of the rune Declaration public static int EncodeRune(Rune rune, byte[] dest, int offset = 0) Parameters Type Name Description Rune rune Rune to encode. System.Byte [] dest Destination buffer. System.Int32 offset Offset into the destination buffer. Returns Type Description System.Int32 The number of bytes written into the destination buffer. EncodeSurrogatePair(UInt32, UInt32, out Rune) Gets a value indicating whether this Rune can be encoded as UTF-16 from a surrogate pair or zero otherwise. Declaration public static bool EncodeSurrogatePair(uint highsurrogate, uint lowSurrogate, out Rune rune) Parameters Type Name Description System.UInt32 highsurrogate The high surrogate code point. System.UInt32 lowSurrogate The low surrogate code point. Rune rune The returning rune. Returns Type Description System.Boolean True if the returning rune is greater than 0 False otherwise. Equals(Object) Determines whether the specified System.Object is equal to the current Rune . Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare with the current Rune . Returns Type Description System.Boolean true if the specified System.Object is equal to the current Rune ; otherwise, false . Overrides System.ValueType.Equals(System.Object) ExpectedSizeFromFirstByte(Byte) Given one byte from a utf8 string, return the number of expected bytes that make up the sequence. Declaration public static int ExpectedSizeFromFirstByte(byte firstByte) Parameters Type Name Description System.Byte firstByte Is the first byte of a UTF8 sequence. Returns Type Description System.Int32 The number of UTF8 bytes expected given the first prefix. FullRune(Byte[]) FullRune reports whether the bytes in p begin with a full UTF-8 encoding of a rune. An invalid encoding is considered a full Rune since it will convert as a width-1 error rune. Declaration public static bool FullRune(byte[] p) Parameters Type Name Description System.Byte [] p byte array. Returns Type Description System.Boolean true , if the bytes in p begin with a full UTF-8 encoding of a rune, false otherwise. GetHashCode() Serves as a hash function for a Rune object. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table. Overrides System.ValueType.GetHashCode() InvalidIndex(Byte[]) Use to find the index of the first invalid utf8 byte sequence in a buffer Declaration public static int InvalidIndex(byte[] buffer) Parameters Type Name Description System.Byte [] buffer Buffer containing the utf8 buffer. Returns Type Description System.Int32 The index of the first invalid byte sequence or -1 if the entire buffer is valid. IsControl(Rune) IsControl reports whether the rune is a control character. Declaration public static bool IsControl(Rune rune) Parameters Type Name Description Rune rune The rune to test for. Returns Type Description System.Boolean true , if the rune is a lower case letter, false otherwise. Remarks The C (Other) Unicode category includes more code points such as surrogates; use C.InRange (r) to test for them. IsDigit(Rune) IsDigit reports whether the rune is a decimal digit. Declaration public static bool IsDigit(Rune rune) Parameters Type Name Description Rune rune The rune to test for. Returns Type Description System.Boolean true , if the rune is a mark, false otherwise. IsGraphic(Rune) IsGraphic reports whether the rune is defined as a Graphic by Unicode. Declaration public static bool IsGraphic(Rune rune) Parameters Type Name Description Rune rune The rune to test for. Returns Type Description System.Boolean true , if the rune is a lower case letter, false otherwise. Remarks Such characters include letters, marks, numbers, punctuation, symbols, and spaces, from categories L, M, N, P, S, Zs. IsLetter(Rune) IsLetter reports whether the rune is a letter (category L). Declaration public static bool IsLetter(Rune rune) Parameters Type Name Description Rune rune The rune to test for. Returns Type Description System.Boolean true , if the rune is a letter, false otherwise. Remarks IsLetterOrDigit(Rune) IsLetterOrDigit reports whether the rune is a letter (category L) or a digit. Declaration public static bool IsLetterOrDigit(Rune rune) Parameters Type Name Description Rune rune The rune to test for. Returns Type Description System.Boolean true , if the rune is a letter or digit, false otherwise. Remarks IsLetterOrNumber(Rune) IsLetterOrDigit reports whether the rune is a letter (category L) or a number (category N). Declaration public static bool IsLetterOrNumber(Rune rune) Parameters Type Name Description Rune rune The rune to test for. Returns Type Description System.Boolean true , if the rune is a letter or number, false otherwise. Remarks IsLower(Rune) Reports whether the rune is a lower case letter. Declaration public static bool IsLower(Rune rune) Parameters Type Name Description Rune rune The rune to test for. Returns Type Description System.Boolean true , if the rune is a lower case letter, false otherwise. IsMark(Rune) IsMark reports whether the rune is a letter (category M). Declaration public static bool IsMark(Rune rune) Parameters Type Name Description Rune rune The rune to test for. Returns Type Description System.Boolean true , if the rune is a mark, false otherwise. Remarks Reports whether the rune is a mark character (category M). IsNonSpacingChar(UInt32, out Int32) Check if the rune is a non-spacing character. Declaration public static bool IsNonSpacingChar(uint rune, out int width) Parameters Type Name Description System.UInt32 rune The rune. System.Int32 width The width. Returns Type Description System.Boolean True if is a non-spacing character, false otherwise. IsNumber(Rune) IsNumber reports whether the rune is a letter (category N). Declaration public static bool IsNumber(Rune rune) Parameters Type Name Description Rune rune The rune to test for. Returns Type Description System.Boolean true , if the rune is a mark, false otherwise. Remarks Reports whether the rune is a mark character (category N). IsPrint(Rune) IsPrint reports whether the rune is defined as printable. Declaration public static bool IsPrint(Rune rune) Parameters Type Name Description Rune rune The rune to test for. Returns Type Description System.Boolean true , if the rune is a lower case letter, false otherwise. Remarks Such characters include letters, marks, numbers, punctuation, symbols, and the ASCII space character, from categories L, M, N, P, S and the ASCII space character. This categorization is the same as IsGraphic except that the only spacing character is ASCII space, U+0020. IsPunctuation(Rune) IsPunct reports whether the rune is a letter (category P). Declaration public static bool IsPunctuation(Rune rune) Parameters Type Name Description Rune rune The rune to test for. Returns Type Description System.Boolean true , if the rune is a mark, false otherwise. Remarks Reports whether the rune is a mark character (category P). IsSurrogateRune(UInt32) Reports whether a rune is a surrogate code point. Declaration public static bool IsSurrogateRune(uint rune) Parameters Type Name Description System.UInt32 rune The rune. Returns Type Description System.Boolean true If is a surrogate code point, false otherwise. IsSymbol(Rune) IsSymbol reports whether the rune is a symbolic character. Declaration public static bool IsSymbol(Rune rune) Parameters Type Name Description Rune rune The rune to test for. Returns Type Description System.Boolean true , if the rune is a mark, false otherwise. IsTitle(Rune) Reports whether the rune is a title case letter. Declaration public static bool IsTitle(Rune rune) Parameters Type Name Description Rune rune The rune to test for. Returns Type Description System.Boolean true , if the rune is a lower case letter, false otherwise. IsUpper(Rune) Reports whether the rune is an upper case letter. Declaration public static bool IsUpper(Rune rune) Parameters Type Name Description Rune rune The rune to test for. Returns Type Description System.Boolean true , if the rune is an upper case letter, false otherwise. IsWhiteSpace(Rune) IsSpace reports whether the rune is a space character as defined by Unicode's White Space property. Declaration public static bool IsWhiteSpace(Rune rune) Parameters Type Name Description Rune rune The rune to test for. Returns Type Description System.Boolean true , if the rune is a mark, false otherwise. Remarks In the Latin-1 space, white space includes '\\t', '\\n', '\\v', '\\f', '\\r', ' ', U+0085 (NEL), U+00A0 (NBSP). Other definitions of spacing characters are set by category Z and property Pattern_White_Space. IsWideChar(UInt32) Check if the rune is a wide character. Declaration public static bool IsWideChar(uint rune) Parameters Type Name Description System.UInt32 rune The rune. Returns Type Description System.Boolean True if is a wide character, false otherwise. RuneCount(Byte[], Int32, Int32) Returns the number of runes in a utf8 encoded buffer Declaration public static int RuneCount(byte[] buffer, int offset = 0, int count = -1) Parameters Type Name Description System.Byte [] buffer Byte buffer containing a utf8 string. System.Int32 offset Starting offset in the buffer. System.Int32 count Number of bytes to process in buffer, or -1 to process until the end of the buffer. Returns Type Description System.Int32 Number of runes. RuneLen(Rune) number of bytes required to encode the rune. Declaration public static int RuneLen(Rune rune) Parameters Type Name Description Rune rune Rune to probe. Returns Type Description System.Int32 The length, or -1 if the rune is not a valid value to encode in UTF-8. SimpleFold(Rune) SimpleFold iterates over Unicode code points equivalent under the Unicode-defined simple case folding. Declaration public static Rune SimpleFold(Rune rune) Parameters Type Name Description Rune rune Rune. Returns Type Description Rune The simple-case folded rune. Remarks SimpleFold iterates over Unicode code points equivalent under the Unicode-defined simple case folding. Among the code points equivalent to rune (including rune itself), SimpleFold returns the smallest rune > r if one exists, or else the smallest rune >= 0. If r is not a valid Unicode code point, SimpleFold(r) returns r. For example: SimpleFold('A') = 'a' SimpleFold('a') = 'A' SimpleFold('K') = 'k' SimpleFold('k') = '\\u212A' (Kelvin symbol, K) SimpleFold('\\u212A') = 'K' SimpleFold('1') = '1' SimpleFold(-2) = -2 To(Rune.Case, Rune) To maps the rune to the specified case: Case.Upper, Case.Lower, or Case.Title Declaration public static Rune To(Rune.Case toCase, Rune rune) Parameters Type Name Description Rune.Case toCase The destination case. Rune rune Rune to convert. Returns Type Description Rune The cased character. ToLower(Rune) ToLower maps the rune to lower case. Declaration public static Rune ToLower(Rune rune) Parameters Type Name Description Rune rune Rune. Returns Type Description Rune The lower cased rune if it can be. ToString() Returns a System.String that represents the current Rune . Declaration public override string ToString() Returns Type Description System.String A System.String that represents the current Rune . Overrides System.ValueType.ToString() ToTitle(Rune) ToLower maps the rune to title case. Declaration public static Rune ToTitle(Rune rune) Parameters Type Name Description Rune rune Rune. Returns Type Description Rune The lower cased rune if it can be. ToUpper(Rune) ToUpper maps the rune to upper case. Declaration public static Rune ToUpper(Rune rune) Parameters Type Name Description Rune rune Rune. Returns Type Description Rune The upper cased rune if it can be. Valid(Byte[]) Reports whether p consists entirely of valid UTF-8-encoded runes. Declaration public static bool Valid(byte[] buffer) Parameters Type Name Description System.Byte [] buffer Byte buffer containing a utf8 string. Returns Type Description System.Boolean ValidRune(Rune) ValidRune reports whether a rune can be legally encoded as UTF-8. Declaration public static bool ValidRune(Rune rune) Parameters Type Name Description Rune rune The rune to test. Returns Type Description System.Boolean true , if rune was validated, false otherwise. Operators Implicit(Char to Rune) Implicit operator conversion from a C# char into a rune. Declaration public static implicit operator Rune(char ch) Parameters Type Name Description System.Char ch 16-bit Character. Returns Type Description Rune Rune representing the C# character Implicit(Rune to UInt32) Implicit operator conversion from a rune to an unsigned integer Declaration public static implicit operator uint (Rune rune) Parameters Type Name Description Rune rune Rune. Returns Type Description System.UInt32 The unsigned integer representation. Implicit(UInt32 to Rune) Implicit operator conversion from an unsigned integer into a rune. Declaration public static implicit operator Rune(uint value) Parameters Type Name Description System.UInt32 value 32-bit unsigned integer. Returns Type Description Rune Rune representing the C# character"
  },
  "api/NStack/System.RuneExtensions.html": {
    "href": "api/NStack/System.RuneExtensions.html",
    "title": "Class RuneExtensions",
    "keywords": "Class RuneExtensions Helper class that implements Rune extensions for the ustring type. Inheritance System.Object RuneExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : System Assembly : NStack.dll Syntax public static class RuneExtensions Methods DecodeLastRune(ustring, Int32) DecodeLastRune unpacks the last UTF-8 encoding in the ustring. Declaration public static (Rune rune, int size) DecodeLastRune(this ustring str, int end = -1) Parameters Type Name Description ustring str String to decode rune from; if it is empty, it returns (RuneError, 0). Otherwise, if the encoding is invalid, it returns (RuneError, 1). Both are impossible results for correct, non-empty UTF-8. System.Int32 end Scan up to that point, if the value is -1, it sets the value to the length of the buffer. Returns Type Description System.ValueTuple < Rune , System.Int32 > The last rune and its width in bytes. Remarks An encoding is invalid if it is incorrect UTF-8, encodes a rune that is out of range, or is not the shortest possible UTF-8 encoding for the value. No other validation is performed. DecodeRune(ustring, Int32, Int32) DecodeRune unpacks the first UTF-8 encoding in the ustring returns the rune and its width in bytes. Declaration public static (Rune rune, int size) DecodeRune(this ustring str, int start = 0, int n = -1) Parameters Type Name Description ustring str ustring to decode. System.Int32 start Starting offset to look into.. System.Int32 n Number of bytes valid in the buffer, or -1 to make it the length of the buffer. Returns Type Description System.ValueTuple < Rune , System.Int32 > If p is empty it returns (RuneError, 0). Otherwise, if the encoding is invalid, it returns (RuneError, 1). Both are impossible results for correct, non-empty UTF-8. ExpectedSizeFromFirstByte(ustring) Given one byte from a utf8 string, return the number of expected bytes that make up the sequence. Declaration public static int ExpectedSizeFromFirstByte(this ustring str) Parameters Type Name Description ustring str String to get the first byte of a UTF8 sequence. Returns Type Description System.Int32 The number of UTF8 bytes expected given the first prefix. FullRune(ustring) FullRune reports whether the ustring begins with a full UTF-8 encoding of a rune. An invalid encoding is considered a full Rune since it will convert as a width-1 error rune. Declaration public static bool FullRune(this ustring str) Parameters Type Name Description ustring str The string to check. Returns Type Description System.Boolean true , if the bytes in p begin with a full UTF-8 encoding of a rune, false otherwise. InvalidIndex(ustring) Use to find the index of the first invalid utf8 byte sequence in a buffer Declaration public static int InvalidIndex(this ustring str) Parameters Type Name Description ustring str String containing the utf8 buffer. Returns Type Description System.Int32 The index of the first invalid byte sequence or -1 if the entire buffer is valid. RuneCount(ustring) Returns the number of runes in a ustring. Declaration public static int RuneCount(this ustring str) Parameters Type Name Description ustring str utf8 string. Returns Type Description System.Int32 Number of runes. Valid(ustring) Reports whether the ustring consists entirely of valid UTF-8-encoded runes. Declaration public static bool Valid(this ustring str) Parameters Type Name Description ustring str String to validate. Returns Type Description System.Boolean"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "",
    "keywords": "NStack contains a new API for .NET based on modern C# and .NET idioms, the long term plan is to use a new model for IO that only uses exceptions for things like invalid parameters, but uses tuples and error codes for the rest. Other areas include making an IO layer that does not surface \"string\" for filenames, as in Unix there are really no filenames as we treat them in .NET, but rather file names are a collection of bytes, which do not necessarily can be decoded into UTF8 [1]. To make things simple, this assumes that UTF8 strings (ustring in this code) can exist without them being valid UTF8 strings, but rather a collection of bytes. [1] For example, older file systems can have filenames that made sense with a particular character set and are effectively not possible to map into strings."
  },
  "index.html": {
    "href": "index.html",
    "title": "NStack",
    "keywords": "NStack NStack contains a new API for .NET based on modern C# and .NET idioms. You can start with the new UTF8 ustring class , which is powered by an updated Unicode library and modern support for UTF8 parsing and decoding . API Documentation Take a look at the API Documentation for NStack. Future The long term plan is to use a new model for IO that only uses exceptions for things like invalid parameters, but uses tuples and error codes for the rest. Other areas include making an IO layer that does not surface \"string\" for filenames, as in Unix there are really no filenames as we treat them in .NET, but rather file names are a collection of bytes, which do not necessarily can be decoded into UTF8 [1]. To make things simple, this assumes that UTF8 strings (ustring in this code) can exist without them being valid UTF8 strings, but rather a collection of bytes. [1] For example, older file systems can have filenames that made sense with a particular character set and are effectively not possible to map into strings."
  },
  "README.html": {
    "href": "README.html",
    "title": "To Generate the Docs",
    "keywords": "This folder generates the API docs for NStack. The API documentation is generated using the DocFX tool . The output of docfx gets put into the ./docs folder which is then checked in. The ./docs folder is then picked up by Github Pages and published to Miguel's Github Pages ( https://migueldeicaza.github.io/NStack/ ). To Generate the Docs Install DotFX https://dotnet.github.io/docfx/tutorial/docfx_getting_started.html Change to the ./docfx folder and run ./build.ps1 Browse to http://localhost:8080 and verify everything looks good. Hit ctrl-c to stop the script. If docfx fails with a Stackoverflow error. Just run it again. And again. Sometimes it takes a few times. If that doesn't work, create a fresh clone or delete the docfx/api , docfx/obj , and docs/ folders and run the steps above again."
  }
}