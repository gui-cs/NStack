<Type Name="Unicode" FullName="NStack.Unicode">
  <TypeSignature Language="C#" Value="public class Unicode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Unicode extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>NStack</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Unicode class contains helper methods to support Unicode encoding.
            </summary>
    <remarks>
      <para>
               Generally the Unicode class provided methods that can help you classify and
               convert Unicode code points.  The word codepoint is considered a mouthful so in
               this class, the word "rune" is used instead and is represented by the
               uint value type.  
            </para>
      <para>
               Unicode code points can be produced by combining independent characters,
               so the rune for a character can be produced by combining one character and
               other elements of it.  Runes on the other hand correspond to a specific
               character.
            </para>
      <para>
               This class surfaces various methods to classify case of a Rune, like
               <see cref="M:NStack.Unicode.IsUpper" />, <see cref="M:NStack.Unicode.IsLower" />, <see cref="M:NStack.Unicode.IsDigit" />,
               <see cref="M:NStack.Unicode.IsGraphic" /> to convert runes from one case to another using the <see cref="M:NStack.Unicode.ToUpper" />,
               <see cref="M:NStack.Unicode.ToLower" />, <see cref="M:NStack.Unicode.ToTitle" /> as well as various constants
               that are useful when working with Unicode runes.
            </para>
      <para>
               Unicode defines various character classes which are surfaced as RangeTables
               as static properties in this class.   You can probe whether a rune belongs
               to a specific range table
            </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Unicode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GraphicRanges">
      <MemberSignature Language="C#" Value="public static NStack.Unicode.RangeTable[] GraphicRanges;" />
      <MemberSignature Language="ILAsm" Value=".field public static valuetype NStack.Unicode/RangeTable[] GraphicRanges" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NStack.Unicode+RangeTable[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The range tables for graphics
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsControl">
      <MemberSignature Language="C#" Value="public static bool IsControl (uint rune);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsControl(unsigned int32 rune) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rune" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="rune">The rune to test for.</param>
        <summary>
            IsControl reports whether the rune is a control character.
            </summary>
        <returns>
          <c>true</c>, if the rune is a lower case letter, <c>false</c> otherwise.</returns>
        <remarks>
            The C (Other) Unicode category includes more code points such as surrogates; use C.InRange (r) to test for them.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDigit">
      <MemberSignature Language="C#" Value="public static bool IsDigit (uint rune);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDigit(unsigned int32 rune) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rune" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="rune">The rune to test for.</param>
        <summary>
            IsDigit reports whether the rune is a decimal digit.
            </summary>
        <returns>
          <c>true</c>, if the rune is a mark, <c>false</c> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGraphic">
      <MemberSignature Language="C#" Value="public static bool IsGraphic (uint rune);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsGraphic(unsigned int32 rune) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rune" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="rune">The rune to test for.</param>
        <summary>
            IsGraphic reports whether the rune is defined as a Graphic by Unicode.
            </summary>
        <returns>
          <c>true</c>, if the rune is a lower case letter, <c>false</c> otherwise.</returns>
        <remarks>
            Such characters include letters, marks, numbers, punctuation, symbols, and
            spaces, from categories L, M, N, P, S, Zs.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLetter">
      <MemberSignature Language="C#" Value="public static bool IsLetter (uint rune);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetter(unsigned int32 rune) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rune" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="rune">The rune to test for.</param>
        <summary>
            IsLetter reports whether the rune is a letter (category L).
            </summary>
        <returns>
          <c>true</c>, if the rune is a letter, <c>false</c> otherwise.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="IsLower">
      <MemberSignature Language="C#" Value="public static bool IsLower (uint rune);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLower(unsigned int32 rune) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rune" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="rune">The rune to test for.</param>
        <summary>
            Reports whether the rune is a lower case letter.
            </summary>
        <returns>
          <c>true</c>, if the rune is a lower case lette, <c>false</c> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMark">
      <MemberSignature Language="C#" Value="public static bool IsMark (uint rune);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMark(unsigned int32 rune) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rune" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="rune">The rune to test for.</param>
        <summary>
            IsMark reports whether the rune is a letter (category M).
            </summary>
        <returns>
          <c>true</c>, if the rune is a mark, <c>false</c> otherwise.</returns>
        <remarks>
            Reports whether the rune is a mark character (category M).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public static bool IsNumber (uint rune);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNumber(unsigned int32 rune) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rune" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="rune">The rune to test for.</param>
        <summary>
            IsNumber reports whether the rune is a letter (category N).
            </summary>
        <returns>
          <c>true</c>, if the rune is a mark, <c>false</c> otherwise.</returns>
        <remarks>
            Reports whether the rune is a mark character (category N).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrint">
      <MemberSignature Language="C#" Value="public static bool IsPrint (uint rune);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPrint(unsigned int32 rune) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rune" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="rune">The rune to test for.</param>
        <summary>
            IsPrint reports whether the rune is defined as printable.
            </summary>
        <returns>
          <c>true</c>, if the rune is a lower case letter, <c>false</c> otherwise.</returns>
        <remarks>
            Such characters include letters, marks, numbers, punctuation, symbols, and the
            ASCII space character, from categories L, M, N, P, S and the ASCII space
            character. This categorization is the same as IsGraphic except that the
            only spacing character is ASCII space, U+0020.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPunct">
      <MemberSignature Language="C#" Value="public static bool IsPunct (uint rune);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPunct(unsigned int32 rune) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rune" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="rune">The rune to test for.</param>
        <summary>
            IsPunct reports whether the rune is a letter (category P).
            </summary>
        <returns>
          <c>true</c>, if the rune is a mark, <c>false</c> otherwise.</returns>
        <remarks>
            Reports whether the rune is a mark character (category P).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRuneInRanges">
      <MemberSignature Language="C#" Value="public static bool IsRuneInRanges (uint rune, params NStack.Unicode.RangeTable[] inRanges);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsRuneInRanges(unsigned int32 rune, valuetype NStack.Unicode/RangeTable[] inRanges) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rune" Type="System.UInt32" />
        <Parameter Name="inRanges" Type="NStack.Unicode+RangeTable[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="rune">Rune.</param>
        <param name="inRanges">In ranges.</param>
        <summary>
            Determines if a rune is on a set of ranges.
            </summary>
        <returns>
          <c>true</c>, if rune in ranges was used, <c>false</c> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSpace">
      <MemberSignature Language="C#" Value="public static bool IsSpace (uint rune);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSpace(unsigned int32 rune) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rune" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="rune">The rune to test for.</param>
        <summary>
            IsSpace reports whether the rune is a space character as defined by Unicode's White Space property.
            </summary>
        <returns>
          <c>true</c>, if the rune is a mark, <c>false</c> otherwise.</returns>
        <remarks>
            In the Latin-1 space, white space includes '\t', '\n', '\v', '\f', '\r', ' ', 
            U+0085 (NEL), U+00A0 (NBSP).
            Other definitions of spacing characters are set by category  Z and property Pattern_White_Space.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSymbol">
      <MemberSignature Language="C#" Value="public static bool IsSymbol (uint rune);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSymbol(unsigned int32 rune) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rune" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="rune">The rune to test for.</param>
        <summary>
            IsSymbol reports whether the rune is a symbolic character.
            </summary>
        <returns>
          <c>true</c>, if the rune is a mark, <c>false</c> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTitle">
      <MemberSignature Language="C#" Value="public static bool IsTitle (uint rune);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsTitle(unsigned int32 rune) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rune" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="rune">The rune to test for.</param>
        <summary>
            Reports whether the rune is a title case letter.
            </summary>
        <returns>
          <c>true</c>, if the rune is a lower case lette, <c>false</c> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUpper">
      <MemberSignature Language="C#" Value="public static bool IsUpper (uint rune);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUpper(unsigned int32 rune) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rune" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="rune">The rune to test for.</param>
        <summary>
            Reports whether the rune is an upper case letter.
            </summary>
        <returns>
          <c>true</c>, if the rune is an upper case lette, <c>false</c> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxAscii">
      <MemberSignature Language="C#" Value="public const uint MaxAscii = 127;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal unsigned int32 MaxAscii = (127)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <MemberValue>127</MemberValue>
      <Docs>
        <summary>
            The maximum ASCII value.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxLatin1">
      <MemberSignature Language="C#" Value="public const uint MaxLatin1 = 255;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal unsigned int32 MaxLatin1 = (255)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <MemberValue>255</MemberValue>
      <Docs>
        <summary>
            The maximum latin1 value.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxRune">
      <MemberSignature Language="C#" Value="public const int MaxRune = 1114111;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MaxRune = (1114111)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>1114111</MemberValue>
      <Docs>
        <summary>
            Maximum valid Unicode code point.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintRanges">
      <MemberSignature Language="C#" Value="public static NStack.Unicode.RangeTable[] PrintRanges;" />
      <MemberSignature Language="ILAsm" Value=".field public static valuetype NStack.Unicode/RangeTable[] PrintRanges" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NStack.Unicode+RangeTable[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The range tables for print
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplacementChar">
      <MemberSignature Language="C#" Value="public const uint ReplacementChar = 65533;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal unsigned int32 ReplacementChar = (65533)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <MemberValue>65533</MemberValue>
      <Docs>
        <summary>
            Represents invalid code points.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SimpleFold">
      <MemberSignature Language="C#" Value="public static uint SimpleFold (uint rune);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 SimpleFold(unsigned int32 rune) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rune" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="rune">Rune.</param>
        <summary>
             SimpleFold iterates over Unicode code points equivalent under
             the Unicode-defined simple case folding.
             </summary>
        <returns>The simple-case folded rune.</returns>
        <remarks>
             SimpleFold iterates over Unicode code points equivalent under
             the Unicode-defined simple case folding. Among the code points
             equivalent to rune (including rune itself), SimpleFold returns the
             smallest rune &gt; r if one exists, or else the smallest rune &gt;= 0.
             If r is not a valid Unicode code point, SimpleFold(r) returns r.
            
             For example:
             <code>
                  SimpleFold('A') = 'a'
                  SimpleFold('a') = 'A'
            
                  SimpleFold('K') = 'k'
                  SimpleFold('k') = '\u212A' (Kelvin symbol, K)
                  SimpleFold('\u212A') = 'K'
            
                  SimpleFold('1') = '1'
            
                  SimpleFold(-2) = -2
             </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="To">
      <MemberSignature Language="C#" Value="public static uint To (NStack.Unicode.Case toCase, uint rune);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 To(valuetype NStack.Unicode/Case toCase, unsigned int32 rune) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toCase" Type="NStack.Unicode+Case" />
        <Parameter Name="rune" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="toCase">The destination case.</param>
        <param name="rune">Rune to convert.</param>
        <summary>
            To maps the rune to the specified case: Case.Upper, Case.Lower, or Case.Title
            </summary>
        <returns>The cased character.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public static uint ToLower (uint rune);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToLower(unsigned int32 rune) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rune" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="rune">Rune.</param>
        <summary>
            ToLower maps the rune to lower case.
            </summary>
        <returns>The lower cased rune if it can be.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTitle">
      <MemberSignature Language="C#" Value="public static uint ToTitle (uint rune);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToTitle(unsigned int32 rune) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rune" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="rune">Rune.</param>
        <summary>
            ToLower maps the rune to title case.
            </summary>
        <returns>The lower cased rune if it can be.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public static uint ToUpper (uint rune);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUpper(unsigned int32 rune) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rune" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="rune">Rune.</param>
        <summary>
            ToUpper maps the rune to upper case.
            </summary>
        <returns>The upper cased rune if it can be.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TurkishCase">
      <MemberSignature Language="C#" Value="public static NStack.Unicode.SpecialCase TurkishCase;" />
      <MemberSignature Language="ILAsm" Value=".field public static valuetype NStack.Unicode/SpecialCase TurkishCase" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NStack.Unicode+SpecialCase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Special casing rules for Turkish.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public const string Version;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string Version" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Version is the Unicode edition from which the tables are derived.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
